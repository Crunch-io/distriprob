"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * (C) Copyright Zachary Martin 2016.
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
var chai_1 = require("chai");
var index_1 = require("../../index");
var digitCompare_1 = require("../digitCompare");
var testCasesFunction = require("../../../test_cases/beta/testCases_function");
var testCasesIncomplete = require("../../../test_cases/beta/testCases_incomplete");
var testCasesDerivative = require("../../../test_cases/beta/testCases_derivative");
chai_1.should();
var DIGIT_AGREE_TOLERANCE = 12;
var DIGIT_AGREE_TOLERANCE_INC_UPPER = 11;
var DIGIT_AGREE_TOLERANCE_INC_INV = 10;
var DIGIT_AGREE_TOLERANCE_INC_INV_PARAM = 11;
var DIGIT_AGREE_TOLERANCE_INC_DERIV = 9;
describe("beta functions", function () {
    describe("function", function () {
        describe("accuracy tests", function () {
            describe("boost data set", function () {
                var _loop_1 = function (testCase) {
                    it("should match high accuracy estimates of function values", function () {
                        var testValue = index_1.beta.function(testCase["a"], testCase["b"]);
                        //console.log(`a: ${testCase["a"]}, b: ${testCase["b"]}, got: ${testValue}, expected: ${testCase["result"]}`);
                        var doa = digitCompare_1.digitsOfAgreement(testCase["result"], testValue);
                        doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE);
                    });
                };
                for (var _i = 0, testCasesFunction_1 = testCasesFunction; _i < testCasesFunction_1.length; _i++) {
                    var testCase = testCasesFunction_1[_i];
                    _loop_1(testCase);
                }
            });
        });
    });
    describe("incomplete", function () {
        describe("accuracy tests", function () {
            describe("boost data set", function () {
                var _loop_2 = function (testCase) {
                    it("should match high accuracy estimates of function values - lower", function () {
                        var testValue = index_1.beta.incomplete(testCase["a"], testCase["b"], testCase["x"], true, false);
                        // console.log(`a: ${testCase["a"]}, b: ${testCase["b"]}, x: ${testCase["x"]}, got: ${testValue}, expected: ${testCase["lower"]}`);
                        var doa = digitCompare_1.digitsOfAgreement(testCase["lower"], testValue);
                        if (testCase["lower"] < 1 / Number.MAX_VALUE && testCase["lower"] !== 0) {
                            doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE + 300 + Math.log10(testCase["lower"]));
                        }
                        else {
                            doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE);
                        }
                    });
                    it("should match high accuracy estimates of function values - upper", function () {
                        var testValue = index_1.beta.incomplete(testCase["a"], testCase["b"], testCase["x"], false, false);
                        // console.log(`a: ${testCase["a"]}, b: ${testCase["b"]}, x: ${testCase["x"]}, got: ${testValue}, expected: ${testCase["upper"]}`);
                        var doa = digitCompare_1.digitsOfAgreement(testCase["upper"], testValue);
                        if (testCase["upper"] < 1 / Number.MAX_VALUE && testCase["upper"] !== 0) {
                            doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_UPPER + 300 + Math.log10(testCase["upper"]));
                        }
                        else {
                            doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_UPPER);
                        }
                    });
                    it("should match high accuracy estimates of function values - lowerReg", function () {
                        var testValue = index_1.beta.incomplete(testCase["a"], testCase["b"], testCase["x"], true, true);
                        // console.log(`a: ${testCase["a"]}, b: ${testCase["b"]}, x: ${testCase["x"]}, got: ${testValue}, expected: ${testCase["lowerReg"]}`);
                        var doa = digitCompare_1.digitsOfAgreement(testCase["lowerReg"], testValue);
                        if (testCase["lowerReg"] < 1 / Number.MAX_VALUE && testCase["lowerReg"] !== 0) {
                            doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE + 300 + Math.log10(testCase["lowerReg"]));
                        }
                        else {
                            doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE);
                        }
                    });
                    it("should match high accuracy estimates of function values - upperReg", function () {
                        var testValue = index_1.beta.incomplete(testCase["a"], testCase["b"], testCase["x"], false, true);
                        // console.log(`a: ${testCase["a"]}, b: ${testCase["b"]}, x: ${testCase["x"]}, got: ${testValue}, expected: ${testCase["upperReg"]}`);
                        var doa = digitCompare_1.digitsOfAgreement(testCase["upperReg"], testValue);
                        if (testCase["upperReg"] < 1 / Number.MAX_VALUE && testCase["upperReg"] !== 0) {
                            doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_UPPER + 300 + Math.log10(testCase["upperReg"]));
                        }
                        else {
                            doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_UPPER);
                        }
                    });
                    it("should match high accuracy estimates of function values - inverse lowerReg", function () {
                        var testValue = index_1.beta.incompleteInverse(testCase["a"], testCase["b"], testCase["lowerReg"], true);
                        // console.log(`a: ${testCase["a"]}, b: ${testCase["b"]}, p: ${testCase["lowerReg"]}, got: ${testValue}, expected: ${testCase["x"]}`);
                        var doa = digitCompare_1.digitsOfAgreement(testCase["x"], testValue);
                        if (testCase["lowerReg"] === 0) {
                            testValue.should.equal(0);
                        }
                        else if (testCase["lowerReg"] === 1) {
                            testValue.should.equal(1);
                        }
                        else if (testCase["lowerReg"] > 0.9) {
                            doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV + Math.log(1 - testCase["lowerReg"]));
                        }
                        else if (testCase["lowerReg"] < 1 / Number.MAX_VALUE) {
                            doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV + 307 + Math.log(testCase["lowerReg"]));
                        }
                        else {
                            doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV);
                        }
                    });
                    it("should match high accuracy estimates of function values - inverse upperReg", function () {
                        var testValue = index_1.beta.incompleteInverse(testCase["a"], testCase["b"], testCase["upperReg"], false);
                        // console.log(`a: ${testCase["a"]}, b: ${testCase["b"]}, q: ${testCase["upperReg"]}, got: ${testValue}, expected: ${testCase["x"]}`);
                        var doa = digitCompare_1.digitsOfAgreement(testCase["x"], testValue);
                        if (testCase["upperReg"] === 0) {
                            testValue.should.equal(1);
                        }
                        else if (testCase["upperReg"] === 1) {
                            testValue.should.equal(0);
                        }
                        else if (testCase["upperReg"] > 0.9) {
                            doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV + Math.log(1 - testCase["upperReg"]));
                        }
                        else if (testCase["upperReg"] < 1 / Number.MAX_VALUE) {
                            doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV + 307 + Math.log(testCase["upperReg"]));
                        }
                        else {
                            doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV);
                        }
                    });
                    if (testCase["lowerReg"] !== 0 && testCase["lowerReg"] !== 1) {
                        it("should match high accuracy estimates of function values - inverse paramA lowerReg", function () {
                            var testValue = index_1.beta.incompleteInverseParameter(testCase["b"], testCase["x"], testCase["lowerReg"], "A", true);
                            //console.log(`a: ${testCase["a"]}, b: ${testCase["b"]}, x: ${testCase["x"]} p: ${testCase["lowerReg"]}, got: ${testValue} expected: ${testCase["a"]}`);
                            var doa = digitCompare_1.digitsOfAgreement(testCase["a"], testValue);
                            if (testCase["lowerReg"] > 0.9) {
                                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV_PARAM + Math.log(1 - testCase["lowerReg"]));
                            }
                            else if (testCase["lowerReg"] < 1 / Number.MAX_VALUE) {
                                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV_PARAM + 307 + Math.log(testCase["lowerReg"]));
                            }
                            else {
                                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV_PARAM);
                            }
                        });
                    }
                    if (testCase["upperReg"] !== 0 && testCase["upperReg"] !== 1) {
                        it("should match high accuracy estimates of function values - inverse paramA upperReg", function () {
                            var testValue = index_1.beta.incompleteInverseParameter(testCase["b"], testCase["x"], testCase["upperReg"], "A", false);
                            //console.log(`a: ${testCase["a"]}, b: ${testCase["b"]}, x: ${testCase["x"]} q: ${testCase["upperReg"]}, got: ${testValue} expected: ${testCase["a"]}`);
                            var doa = digitCompare_1.digitsOfAgreement(testCase["a"], testValue);
                            if (testCase["upperReg"] > 0.9) {
                                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV_PARAM + Math.log(1 - testCase["upperReg"]));
                            }
                            else if (testCase["upperReg"] < 1 / Number.MAX_VALUE) {
                                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV_PARAM + 307 + Math.log(testCase["upperReg"]));
                            }
                            else {
                                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV_PARAM);
                            }
                        });
                    }
                    if (testCase["lowerReg"] !== 0 && testCase["lowerReg"] !== 1) {
                        it("should match high accuracy estimates of function values - inverse paramB lowerReg", function () {
                            var testValue = index_1.beta.incompleteInverseParameter(testCase["a"], testCase["x"], testCase["lowerReg"], "B", true);
                            //console.log(`a: ${testCase["a"]}, b: ${testCase["b"]}, x: ${testCase["x"]} p: ${testCase["lowerReg"]}, got: ${testValue} expected: ${testCase["b"]}`);
                            var doa = digitCompare_1.digitsOfAgreement(testCase["b"], testValue);
                            if (testCase["lowerReg"] > 0.9) {
                                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV_PARAM + Math.log(1 - testCase["lowerReg"]));
                            }
                            else if (testCase["lowerReg"] < 1 / Number.MAX_VALUE) {
                                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV_PARAM + 307 + Math.log(testCase["lowerReg"]));
                            }
                            else {
                                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV_PARAM);
                            }
                        });
                    }
                    if (testCase["upperReg"] !== 0 && testCase["upperReg"] !== 1) {
                        it("should match high accuracy estimates of function values - inverse paramB upperReg", function () {
                            var testValue = index_1.beta.incompleteInverseParameter(testCase["a"], testCase["x"], testCase["upperReg"], "B", false);
                            //console.log(`a: ${testCase["a"]}, b: ${testCase["b"]}, x: ${testCase["x"]} q: ${testCase["upperReg"]}, got: ${testValue} expected: ${testCase["b"]}`);
                            var doa = digitCompare_1.digitsOfAgreement(testCase["b"], testValue);
                            if (testCase["upperReg"] > 0.9) {
                                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV_PARAM + Math.log(1 - testCase["upperReg"]));
                            }
                            else if (testCase["upperReg"] < 1 / Number.MAX_VALUE) {
                                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV_PARAM + 307 + Math.log(testCase["upperReg"]));
                            }
                            else {
                                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV_PARAM);
                            }
                        });
                    }
                };
                for (var _i = 0, testCasesIncomplete_1 = testCasesIncomplete; _i < testCasesIncomplete_1.length; _i++) {
                    var testCase = testCasesIncomplete_1[_i];
                    _loop_2(testCase);
                }
            });
        });
    });
    describe("derivative", function () {
        describe("accuracy tests", function () {
            describe("boost data set", function () {
                var _loop_3 = function (testCase) {
                    it("should match high accuracy estimates of function values", function () {
                        var testValue = index_1.beta.incompleteDerivative(testCase["a"], testCase["b"], testCase["x"]);
                        console.log("a: " + testCase["a"] + ", b: " + testCase["b"] + ", x: " + testCase["x"] + ", got: " + testValue + ", expected: " + testCase["result"]);
                        var doa = digitCompare_1.digitsOfAgreement(testCase["result"], testValue);
                        if (testCase["result"] > 1e-300) {
                            doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_DERIV);
                        }
                    });
                };
                for (var _i = 0, testCasesDerivative_1 = testCasesDerivative; _i < testCasesDerivative_1.length; _i++) {
                    var testCase = testCasesDerivative_1[_i];
                    _loop_3(testCase);
                }
            });
        });
    });
});
