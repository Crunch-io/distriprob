"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * (C) Copyright Zachary Martin 2016.
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
var chai_1 = require("chai");
var index_1 = require("../../index");
var digitCompare_1 = require("../digitCompare");
var testCasesDi = require("../../../test_cases/gammaFunctions/testCases_di");
var testCasesTri = require("../../../test_cases/gammaFunctions/testCases_tri");
var testCasesPoly = require("../../../test_cases/gammaFunctions/testCases_poly");
var testCasesFuncAndLog = require("../../../test_cases/gammaFunctions/testCases_function_and_log");
var testCasesDeltaRatio = require("../../../test_cases/gammaFunctions/testCases_delta_ratio");
var testCasesRatio = require("../../../test_cases/gammaFunctions/testCases_ratio");
var testCasesIncomplete = require("../../../test_cases/gammaFunctions/testCases_incomplete");
chai_1.should();
var DIGIT_AGREE_TOLERANCE = 13;
var DIGIT_AGREE_TOLERANCE_POLY = 12;
var DIGIT_AGREE_TOLERANCE_INC = 11;
var DIGIT_AGREE_TOLERANCE_INC_INV = 9;
describe("gamma functions", function () {
    describe("function", function () {
        describe("accuracy tests", function () {
            describe("boost data set", function () {
                var _loop_1 = function (testCase) {
                    it("should match high accuracy estimates of function values", function () {
                        var testValue = index_1.gamma.function(testCase["z"]);
                        //console.log(`n: ${testCase["n"]}, z: ${testCase["z"]}, got: ${testValue}, expected: ${testCase["result"]}`);
                        var doa = digitCompare_1.digitsOfAgreement(testCase["result"], testValue);
                        doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE);
                    });
                };
                for (var _i = 0, testCasesFuncAndLog_1 = testCasesFuncAndLog; _i < testCasesFuncAndLog_1.length; _i++) {
                    var testCase = testCasesFuncAndLog_1[_i];
                    _loop_1(testCase);
                }
            });
        });
    });
    describe("log", function () {
        describe("accuracy tests", function () {
            describe("boost data set", function () {
                var _loop_2 = function (testCase) {
                    it("should match high accuracy estimates of function values", function () {
                        var testValue = index_1.gamma.functionLog(testCase["z"]);
                        //console.log(`n: ${testCase["n"]}, z: ${testCase["z"]}, got: ${testValue}, expected: ${testCase["result"]}`);
                        var doa = digitCompare_1.digitsOfAgreement(testCase["logResult"], testValue);
                        doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE);
                    });
                };
                for (var _i = 0, testCasesFuncAndLog_2 = testCasesFuncAndLog; _i < testCasesFuncAndLog_2.length; _i++) {
                    var testCase = testCasesFuncAndLog_2[_i];
                    _loop_2(testCase);
                }
            });
        });
    });
    describe("di", function () {
        describe("accuracy tests", function () {
            describe("boost data set", function () {
                var _loop_3 = function (testCase) {
                    it("should match high accuracy estimates of function values", function () {
                        var testValue = index_1.gamma.di(testCase["z"]);
                        //console.log(`n: ${testCase["n"]}, z: ${testCase["z"]}, got: ${testValue}, expected: ${testCase["result"]}`);
                        var doa = digitCompare_1.digitsOfAgreement(testCase["result"], testValue);
                        if (testCase["result"] > 1 / Number.MAX_VALUE) {
                            doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE);
                        }
                        else {
                            doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE - 1);
                        }
                    });
                };
                for (var _i = 0, testCasesDi_1 = testCasesDi; _i < testCasesDi_1.length; _i++) {
                    var testCase = testCasesDi_1[_i];
                    _loop_3(testCase);
                }
            });
        });
    });
    describe("tri", function () {
        describe("accuracy tests", function () {
            describe("boost data set", function () {
                var _loop_4 = function (testCase) {
                    it("should match high accuracy estimates of function values", function () {
                        var testValue = index_1.gamma.tri(testCase["z"]);
                        //console.log(`n: ${testCase["n"]}, z: ${testCase["z"]}, got: ${testValue}, expected: ${testCase["result"]}`);
                        var doa = digitCompare_1.digitsOfAgreement(testCase["result"], testValue);
                        if (testCase["result"] > 1 / Number.MAX_VALUE) {
                            doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE);
                        }
                        else {
                            doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE - 1);
                        }
                    });
                };
                for (var _i = 0, testCasesTri_1 = testCasesTri; _i < testCasesTri_1.length; _i++) {
                    var testCase = testCasesTri_1[_i];
                    _loop_4(testCase);
                }
            });
        });
    });
    describe("poly", function () {
        describe("accuracy tests", function () {
            describe("boost data set", function () {
                var _loop_5 = function (testCase) {
                    it("should match high accuracy estimates of function values", function () {
                        var testValue = index_1.gamma.poly(testCase["n"], testCase["z"]);
                        //console.log(`n: ${testCase["n"]}, z: ${testCase["z"]}, got: ${testValue}, expected: ${testCase["result"]}`);
                        var doa = digitCompare_1.digitsOfAgreement(testCase["result"], testValue);
                        if (testCase["result"] > 1 / Number.MAX_VALUE) {
                            doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_POLY);
                        }
                    });
                };
                for (var _i = 0, testCasesPoly_1 = testCasesPoly; _i < testCasesPoly_1.length; _i++) {
                    var testCase = testCasesPoly_1[_i];
                    _loop_5(testCase);
                }
            });
        });
    });
    describe("delta ratio", function () {
        describe("accuracy tests", function () {
            describe("boost data set", function () {
                var _loop_6 = function (testCase) {
                    it("should match high accuracy estimates of function values - plus delta", function () {
                        var testValue = index_1.gamma.functionDeltaRatio(testCase["a"], testCase["delta"]);
                        //console.log(`n: ${testCase["n"]}, z: ${testCase["z"]}, got: ${testValue}, expected: ${testCase["result"]}`);
                        var doa = digitCompare_1.digitsOfAgreement(testCase["plusResult"], testValue);
                        doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE + 1);
                    });
                    it("should match high accuracy estimates of function values - minus delta", function () {
                        var testValue = index_1.gamma.functionDeltaRatio(testCase["a"], -testCase["delta"]);
                        //console.log(`n: ${testCase["n"]}, z: ${testCase["z"]}, got: ${testValue}, expected: ${testCase["result"]}`);
                        var doa = digitCompare_1.digitsOfAgreement(testCase["minusResult"], testValue);
                        doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE);
                    });
                };
                for (var _i = 0, testCasesDeltaRatio_1 = testCasesDeltaRatio; _i < testCasesDeltaRatio_1.length; _i++) {
                    var testCase = testCasesDeltaRatio_1[_i];
                    _loop_6(testCase);
                }
            });
        });
    });
    describe("ratio", function () {
        describe("accuracy tests", function () {
            describe("boost data set", function () {
                var _loop_7 = function (testCase) {
                    it("should match high accuracy estimates of function values", function () {
                        var testValue = index_1.gamma.functionRatio(testCase["a"], testCase["b"]);
                        //console.log(`n: ${testCase["n"]}, z: ${testCase["z"]}, got: ${testValue}, expected: ${testCase["result"]}`);
                        var doa = digitCompare_1.digitsOfAgreement(testCase["result"], testValue);
                        doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE);
                    });
                };
                for (var _i = 0, testCasesRatio_1 = testCasesRatio; _i < testCasesRatio_1.length; _i++) {
                    var testCase = testCasesRatio_1[_i];
                    _loop_7(testCase);
                }
            });
        });
    });
    describe("incomplete", function () {
        describe("accuracy tests", function () {
            describe("boost data set", function () {
                var _loop_8 = function (testCase) {
                    if (testCase["a"] <= 171) {
                        it("should match high accuracy estimates of function values - upper", function () {
                            var testValue = index_1.gamma.incomplete(testCase["a"], testCase["z"], false, false);
                            //console.log(`a: ${testCase["a"]}, z: ${testCase["z"]}, got: ${testValue}, expected: ${testCase["upper"]}`);
                            var doa = digitCompare_1.digitsOfAgreement(testCase["upper"], testValue);
                            doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC);
                        });
                    }
                    it("should match high accuracy estimates of function values - upperReg", function () {
                        var testValue = index_1.gamma.incomplete(testCase["a"], testCase["z"], false, true);
                        //console.log(`a: ${testCase["a"]}, z: ${testCase["z"]}, got: ${testValue}, expected: ${testCase["upperReg"]}`);
                        var doa = digitCompare_1.digitsOfAgreement(testCase["upperReg"], testValue);
                        doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC);
                    });
                    if (testCase["a"] <= 171) {
                        it("should match high accuracy estimates of function values - lower", function () {
                            var testValue = index_1.gamma.incomplete(testCase["a"], testCase["z"], true, false);
                            //console.log(`a: ${testCase["a"]}, z: ${testCase["z"]}, got: ${testValue}, expected: ${testCase["lower"]}`);
                            var doa = digitCompare_1.digitsOfAgreement(testCase["lower"], testValue);
                            doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC);
                        });
                    }
                    it("should match high accuracy estimates of function values - lowerReg", function () {
                        var testValue = index_1.gamma.incomplete(testCase["a"], testCase["z"], true, true);
                        //console.log(`a: ${testCase["a"]}, z: ${testCase["z"]}, got: ${testValue}, expected: ${testCase["lowerReg"]}`);
                        var doa = digitCompare_1.digitsOfAgreement(testCase["lowerReg"], testValue);
                        doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC);
                    });
                    it("should match high accuracy estimates of function values - lowerReg inverse", function () {
                        if (testCase["lowerReg"] !== 0 && testCase["lowerReg"] !== 1) {
                            var testValue = index_1.gamma.incompleteInverse(testCase["a"], testCase["lowerReg"], true);
                            //console.log(`a: ${testCase["a"]}, p: ${testCase["lowerReg"]}, got: ${testValue}, expected: ${testCase["z"]}`);
                            var doa = digitCompare_1.digitsOfAgreement(testCase["z"], testValue);
                            if (testCase["lowerReg"] > 0.9) {
                                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV +
                                    Math.log10(1 - testCase["lowerReg"]));
                            }
                            else {
                                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV);
                            }
                        }
                    });
                    it("should match high accuracy estimates of function values - upperReg inverse", function () {
                        if (testCase["upperReg"] !== 0 && testCase["upperReg"] !== 1) {
                            var testValue = index_1.gamma.incompleteInverse(testCase["a"], testCase["upperReg"], false);
                            //console.log(`a: ${testCase["a"]}, q: ${testCase["upperReg"]}, got: ${testValue}, expected: ${testCase["z"]}`);
                            var doa = digitCompare_1.digitsOfAgreement(testCase["z"], testValue);
                            if (testCase["upperReg"] > 0.9) {
                                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV +
                                    Math.log10(1 - testCase["upperReg"]));
                            }
                            else {
                                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV);
                            }
                        }
                    });
                    it("should match high accuracy estimates of function values - lowerReg inverse parameter", function () {
                        if (testCase["lowerReg"] !== 0 && testCase["lowerReg"] !== 1) {
                            var testValue = index_1.gamma.incompleteInverseParameter(testCase["z"], testCase["lowerReg"], true);
                            //console.log(`a: ${testCase["a"]}, p: ${testCase["lowerReg"]}, got: ${testValue}, expected: ${testCase["z"]}`);
                            var doa = digitCompare_1.digitsOfAgreement(testCase["a"], testValue);
                            if (testCase["lowerReg"] > 0.9) {
                                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE +
                                    Math.log10(1 - testCase["lowerReg"]));
                            }
                            else {
                                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE);
                            }
                        }
                    });
                    it("should match high accuracy estimates of function values - upperReg inverse parameter", function () {
                        if (testCase["upperReg"] !== 0 && testCase["upperReg"] !== 1) {
                            var testValue = index_1.gamma.incompleteInverseParameter(testCase["z"], testCase["upperReg"], false);
                            //console.log(`a: ${testCase["a"]}, p: ${testCase["lowerReg"]}, got: ${testValue}, expected: ${testCase["z"]}`);
                            var doa = digitCompare_1.digitsOfAgreement(testCase["a"], testValue);
                            if (testCase["upperReg"] > 0.9) {
                                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE +
                                    Math.log10(1 - testCase["upperReg"]));
                            }
                            else {
                                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE);
                            }
                        }
                    });
                };
                for (var _i = 0, testCasesIncomplete_1 = testCasesIncomplete; _i < testCasesIncomplete_1.length; _i++) {
                    var testCase = testCasesIncomplete_1[_i];
                    _loop_8(testCase);
                }
            });
        });
    });
});
