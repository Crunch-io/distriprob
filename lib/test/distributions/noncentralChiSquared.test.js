"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * (C) Copyright Zachary Martin 2016.
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
var chai_1 = require("chai");
var index_1 = require("../../index");
var digitCompare_1 = require("../digitCompare");
var testCases = require("../../../test_cases/chiSquared/testCases");
var testCasesBig = require("../../../test_cases/chiSquared/testCases_big");
chai_1.should();
var DIGIT_AGREE_TOLERANCE = 11;
var DIGIT_AGREE_TOLERANCE_BIG = 11;
describe("Non-central Chi Squared distribution", function () {
    var caseNum = 0;
    describe("accuracy tests", function () {
        var _loop_1 = function (testCase) {
            it("should match high accuracy estimates for cdf in lower tail", function () {
                var testValue = index_1.chi2.cdf(testCase["x"], testCase["dof"], true, testCase["ncp"]);
                var doa = digitCompare_1.digitsOfAgreement(testCase["p"], testValue);
                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE);
            });
            it("should match high accuracy estimates for cdf in upper tail", function () {
                var testValue = index_1.chi2.cdf(testCase["x"], testCase["dof"], false, testCase["ncp"]);
                var doa = digitCompare_1.digitsOfAgreement(testCase["q"], testValue);
                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE);
            });
            caseNum++;
            if (testCase["p"] < 0.99 && testCase["p"] !== 0) {
                it("should match high accuracy estimates for quantile in lower tail", function () {
                    var testValue = index_1.chi2.quantile(testCase["p"], testCase["dof"], true, testCase["ncp"]);
                    var doa = digitCompare_1.digitsOfAgreement(testCase["x"], testValue);
                    doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE);
                });
            }
            if (testCase["q"] < 0.99 && testCase["q"] !== 0) {
                it("should match high accuracy estimates for quantile in upper tail", function () {
                    var testValue = index_1.chi2.quantile(testCase["q"], testCase["dof"], false, testCase["ncp"]);
                    var doa = digitCompare_1.digitsOfAgreement(testCase["x"], testValue);
                    doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE);
                });
            }
        };
        for (var _i = 0, testCases_1 = testCases; _i < testCases_1.length; _i++) {
            var testCase = testCases_1[_i];
            _loop_1(testCase);
        }
        var _loop_2 = function (testCase) {
            if (testCase["p"] < 1e-284 || testCase["q"] < 1e-203) {
                return "continue";
            }
            it("should match high accuracy estimates for cdf in lower tail with extreme values", function () {
                var testValue = index_1.chi2.cdf(testCase["x"], testCase["dof"], true, testCase["ncp"]);
                var doa = digitCompare_1.digitsOfAgreement(testCase["p"], testValue);
                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE);
            });
            it("should match high accuracy estimates for cdf in upper tail with extreme values", function () {
                var testValue = index_1.chi2.cdf(testCase["x"], testCase["dof"], false, testCase["ncp"]);
                var doa = digitCompare_1.digitsOfAgreement(testCase["q"], testValue);
                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE);
            });
            caseNum++;
            if (testCase["p"] < 0.99 && testCase["p"] !== 0) {
                it("should match high accuracy estimates for quantile in lower tail with extreme values", function () {
                    var testValue = index_1.chi2.quantile(testCase["p"], testCase["dof"], true, testCase["ncp"]);
                    var doa = digitCompare_1.digitsOfAgreement(testCase["x"], testValue);
                    doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE);
                });
            }
            if (testCase["q"] < 0.99 && testCase["q"] !== 0) {
                it("should match high accuracy estimates for quantile in upper tail with extreme values", function () {
                    var testValue = index_1.chi2.quantile(testCase["q"], testCase["dof"], false, testCase["ncp"]);
                    var doa = digitCompare_1.digitsOfAgreement(testCase["x"], testValue);
                    doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE);
                });
            }
        };
        for (var _a = 0, testCasesBig_1 = testCasesBig; _a < testCasesBig_1.length; _a++) {
            var testCase = testCasesBig_1[_a];
            _loop_2(testCase);
        }
    });
});
