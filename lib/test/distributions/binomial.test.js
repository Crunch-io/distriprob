"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * (C) Copyright Zachary Martin 2016.
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
var chai_1 = require("chai");
var index_1 = require("../../index");
var testCasesQuantile = require("../../../test_cases/binomial/testCases_dist_quantile");
chai_1.should();
var DIGIT_AGREE_TOLERANCE = 16;
describe("binomial distribution", function () {
    describe("quantile", function () {
        describe("accuracy tests", function () {
            describe("boost data set", function () {
                var _loop_1 = function (testCase) {
                    it("should match high accuracy estimates of function values - lower", function () {
                        var testValue = index_1.binomial.quantile(testCase["p"], testCase["trials"], testCase["probSuccess"], true);
                        //console.log(`true: ${Math.ceil(testCase["lower"]}, got: ${testValue}`);
                        testValue.should.equal(Math.ceil(testCase["lower"]));
                    });
                    it("should match high accuracy estimates of function values - upper", function () {
                        var testValue = index_1.binomial.quantile(testCase["p"], testCase["trials"], testCase["probSuccess"], false);
                        //console.log(`true: ${Math.ceil(testCase["lower"]}, got: ${testValue}`);
                        testValue.should.equal(Math.ceil(testCase["upper"]));
                    });
                };
                for (var _i = 0, testCasesQuantile_1 = testCasesQuantile; _i < testCasesQuantile_1.length; _i++) {
                    var testCase = testCasesQuantile_1[_i];
                    _loop_1(testCase);
                }
            });
        });
    });
});
