"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * (C) Copyright Zachary Martin 2016.
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
var chai_1 = require("chai");
var index_1 = require("../../index");
var digitCompare_1 = require("../digitCompare");
var testCases = require("../../../test_cases/hypergeometric/testCases_data2");
chai_1.should();
var DIGIT_AGREE_TOLERANCE_PDF = 14;
var DIGIT_AGREE_TOLERANCE_CDF_LOWER = 14;
var DIGIT_AGREE_TOLERANCE_CDF_UPPER = 13;
describe("hypergeometric distribution", function () {
    var _loop_1 = function (testCase) {
        describe("pdf", function () {
            describe("accuracy tests", function () {
                describe("boost data set", function () {
                    it("should match high accuracy estimates of function values", function () {
                        var testValue = index_1.hypergeometric.pdf(testCase["sampleSuccesses"], testCase["draws"], testCase["successPop"], testCase["totalPop"]);
                        //console.log(`sampleSuccesses: ${testCase["sampleSuccesses"]}, draws: ${testCase["draws"]}, successPop: ${testCase["successPop"]}, totalPop: ${testCase["totalPop"]}, got: ${testValue}, expected: ${testCase["pdf"]}`);
                        var doa = digitCompare_1.digitsOfAgreement(testCase["pdf"], testValue);
                        doa.should.be.at.least(DIGIT_AGREE_TOLERANCE_PDF);
                    });
                });
            });
        });
        describe("cdf", function () {
            describe("accuracy tests", function () {
                describe("boost data set", function () {
                    it("should match high accuracy estimates of function values - lower", function () {
                        var testValue = index_1.hypergeometric.cdf(testCase["sampleSuccesses"], testCase["draws"], testCase["successPop"], testCase["totalPop"], true);
                        // console.log(`sampleSuccesses: ${testCase["sampleSuccesses"]}, draws: ${testCase["draws"]}, successPop: ${testCase["successPop"]}, totalPop: ${testCase["totalPop"]}, got: ${testValue}, expected: ${testCase["cdfLower"]}`);
                        var doa = digitCompare_1.digitsOfAgreement(testCase["cdfLower"], testValue);
                        doa.should.be.at.least(DIGIT_AGREE_TOLERANCE_CDF_LOWER);
                    });
                    it("should match high accuracy estimates of function values - upper", function () {
                        var testValue = index_1.hypergeometric.cdf(testCase["sampleSuccesses"], testCase["draws"], testCase["successPop"], testCase["totalPop"], false);
                        // console.log(`sampleSuccesses: ${testCase["sampleSuccesses"]}, draws: ${testCase["draws"]}, successPop: ${testCase["successPop"]}, totalPop: ${testCase["totalPop"]}, got: ${testValue}, expected: ${testCase["cdfUpper"]}`);
                        var doa = digitCompare_1.digitsOfAgreement(testCase["cdfUpper"], testValue);
                        if (testCase["cdfUpper"] > 1e-300) {
                            doa.should.be.at.least(DIGIT_AGREE_TOLERANCE_CDF_UPPER);
                        }
                    });
                });
            });
        });
        describe("quantile", function () {
            describe("accuracy tests", function () {
                describe("boost data set", function () {
                    it("should match high accuracy estimates of function values - lower", function () {
                        var testValue = index_1.hypergeometric.quantile(testCase["cdfLower"], testCase["draws"], testCase["successPop"], testCase["totalPop"], true);
                        // console.log(`p: ${testCase["cdfLower"]}, draws: ${testCase["draws"]}, successPop: ${testCase["successPop"]}, totalPop: ${testCase["totalPop"]}, got: ${testValue}, expected: ${testCase["sampleSuccesses"]}`);
                        if (testCase["cdfLower"] === 1) {
                            testValue.should.equal(Math.min(testCase["draws"], testCase["successPop"]));
                        }
                        else if (testCase["cdfLower"] === 0) {
                            testValue.should.equal(Math.max(0, testCase["draws"] + testCase["successPop"] - testCase["totalPop"]));
                        }
                        else if (testCase["cdfLower"] > 1 - 1e-14) {
                            testValue.should.be.within(testCase["sampleSuccesses"] - 1, testCase["sampleSuccesses"] + 1);
                        }
                        else {
                            testValue.should.equal(testCase["sampleSuccesses"]);
                        }
                    });
                    it("should match high accuracy estimates of function values - upper", function () {
                        var testValue = index_1.hypergeometric.quantile(testCase["cdfUpper"], testCase["draws"], testCase["successPop"], testCase["totalPop"], false);
                        // console.log(`p: ${testCase["cdfUpper"]}, draws: ${testCase["draws"]}, successPop: ${testCase["successPop"]}, totalPop: ${testCase["totalPop"]}, got: ${testValue}, expected: ${testCase["sampleSuccesses"]}`);
                        if (testCase["cdfUpper"] === 1) {
                            testValue.should.equal(Math.max(0, testCase["draws"] + testCase["successPop"] - testCase["totalPop"]));
                        }
                        else if (testCase["cdfUpper"] === 0) {
                            testValue.should.equal(Math.min(testCase["draws"], testCase["successPop"]));
                        }
                        else if (testCase["cdfUpper"] < 1 / Number.MAX_VALUE) {
                            testValue.should.be.within(testCase["sampleSuccesses"] - 10, testCase["sampleSuccesses"] + 10);
                        }
                        else {
                            testValue.should.equal(testCase["sampleSuccesses"]);
                        }
                    });
                });
            });
        });
    };
    for (var _i = 0, testCases_1 = testCases; _i < testCases_1.length; _i++) {
        var testCase = testCases_1[_i];
        _loop_1(testCase);
    }
});
