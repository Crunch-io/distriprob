"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * (C) Copyright Gautam Sewani 2008.
 * (C) Copyright John Maddock 2008.
 * (C) Copyright Zachary Martin 2016 (port to javascript).
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
var HypergeometricPDF = require("./boostPorts/distributions/detail/hypergeometric_pdf").HypergeometricPDF;
var HypergeometricCDF = require("./boostPorts/distributions/detail/hypergeometric_cdf").HypergeometricCDF;
var HypergeometricQuantile = require("./boostPorts/distributions/detail/hypergeometric_quantile")
    .HypergeometricQuantile;
var check = require("./errorHandling").check;
var Random = require("./random").Random;
var HypergeometricDist = /** @class */ (function () {
    function HypergeometricDist(cache) {
        this.cache = cache;
    }
    HypergeometricDist.checkParameters = function (functionName, draws, successPop, totalPop, sampleSuccesses, lowerTail, p, n, seed) {
        var params = {
            lowerTail: undefined
        };
        check(draws, "draws", "hypergeometric distribution " + functionName, "nonnegative_integer");
        check(successPop, "success population", "hypergeometric distribution " + functionName, "nonnegative_integer");
        check(totalPop, "total population", "hypergeometric distribution " + functionName, "nonnegative_integer");
        if (typeof sampleSuccesses !== "undefined") {
            check(sampleSuccesses, "sample successes", "hypergeometric distribution " + functionName, "nonnegative_integer");
        }
        if (typeof lowerTail !== "undefined" && lowerTail !== null) {
            check(lowerTail, "lowerTail", "hypergeometric distribution " + functionName, "boolean");
            params.lowerTail = lowerTail;
        }
        else {
            params.lowerTail = true;
        }
        if (typeof p !== "undefined") {
            check(p, "p", "hypergeometric distribution " + functionName, "probability");
        }
        if (typeof n !== "undefined") {
            check(n, "n", "hypergeometric distribution " + functionName, "nonnegative_integer");
        }
        if (typeof seed !== "undefined" && seed !== null) {
            check(seed, "seed", "hypergeometric distribution " + functionName, "seed");
        }
        return params;
    };
    HypergeometricDist.prototype.pdf = function (sampleSuccesses, draws, successPop, totalPop) {
        var params = HypergeometricDist.checkParameters("pdf", draws, successPop, totalPop, sampleSuccesses);
        return HypergeometricPDF.imp(sampleSuccesses, successPop, draws, totalPop, this.cache);
    };
    HypergeometricDist.prototype.cdf = function (sampleSuccesses, draws, successPop, totalPop, lowerTail, primes) {
        var params = HypergeometricDist.checkParameters("cdf", draws, successPop, totalPop, sampleSuccesses, lowerTail);
        if (sampleSuccesses < Math.max(0, draws + successPop - totalPop)) {
            return params.lowerTail ? 0 : 1;
        }
        else if (sampleSuccesses > Math.min(draws, successPop)) {
            return params.lowerTail ? 1 : 0;
        }
        else {
            return HypergeometricCDF.imp(sampleSuccesses, successPop, draws, totalPop, !params.lowerTail, this.cache);
        }
    };
    HypergeometricDist.prototype.quantile = function (p, draws, successPop, totalPop, lowerTail, primes) {
        var params = HypergeometricDist.checkParameters("quantile", draws, successPop, totalPop, undefined, lowerTail, p);
        if (p === 0) {
            return params.lowerTail ?
                Math.max(0, draws + successPop - totalPop)
                :
                    Math.min(draws, successPop);
        }
        else if (p === 1) {
            return params.lowerTail ?
                Math.min(draws, successPop)
                :
                    Math.max(0, draws + successPop - totalPop);
        }
        else {
            var p0 = params.lowerTail ? p : 1 - p;
            var q0 = params.lowerTail ? 1 - p : p;
            return HypergeometricQuantile.imp(p0, q0, draws, successPop, totalPop, "up", this.cache);
        }
    };
    HypergeometricDist.prototype.random = function (n, draws, successPop, totalPop, seed) {
        var params = HypergeometricDist.checkParameters("random", draws, successPop, totalPop, undefined, undefined, undefined, n, seed);
        return Random.numbers(n, this.quantile, [draws, successPop, totalPop, true, this.cache], seed, this);
    };
    HypergeometricDist.prototype.randomIterator = function (n, draws, successPop, totalPop, seed, primes) {
        if (typeof n === "undefined" || n === null) {
            n = Number.POSITIVE_INFINITY;
        }
        var params = HypergeometricDist.checkParameters("randomIterator", draws, successPop, totalPop, undefined, undefined, undefined, n, seed);
        return Random.numberIterator(n, this.quantile, [draws, successPop, totalPop, true, this.cache], seed, this);
    };
    return HypergeometricDist;
}()); // end of class HypergeometricDist
exports.HypergeometricDist = HypergeometricDist;
