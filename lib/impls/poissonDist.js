"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * (C) Copyright John Maddock 2006.
 * (C) Copyright Paul A. Bristow 2007.
 * (C) Copyright Zachary Martin 2016 (port to JavaScript).
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
var Gamma = require("./boostPorts/special_functions/gamma").Gamma;
var Expm1 = require("./boostPorts/special_functions/expm1").Expm1;
var GammaInvA = require("./boostPorts/special_functions/detail/gamma_inva").GammaInvA;
var InvDiscreteQuantile = require("./boostPorts/distributions/detail/inv_discrete_quantile").InvDiscreteQuantile;
var Random = require("./random").Random;
var check = require("./errorHandling").check;
var PoissonDist = /** @class */ (function () {
    function PoissonDist() {
    }
    PoissonDist.checkParameters = function (functionName, lambda, k, lowerTail, p, n, seed) {
        var params = {
            lowerTail: undefined
        };
        check(lambda, "lambda", "poisson distribution " + functionName, "nonnegative_real");
        if (typeof k !== "undefined") {
            check(k, "k", "poisson distribution " + functionName, "real");
        }
        if (typeof lowerTail !== "undefined" && lowerTail !== null) {
            check(lowerTail, "lowerTail", "poisson distribution " + functionName, "boolean");
            params.lowerTail = lowerTail;
        }
        else {
            params.lowerTail = true;
        }
        if (typeof p !== "undefined") {
            check(p, "p", "poisson distribution " + functionName, "probability");
        }
        if (typeof n !== "undefined") {
            check(n, "n", "poisson distribution " + functionName, "nonnegative_integer");
        }
        if (typeof seed !== "undefined" && seed !== null) {
            check(seed, "seed", "poisson distribution " + functionName, "seed");
        }
        return params;
    };
    PoissonDist.pdf = function (k, lambda) {
        var params = PoissonDist.checkParameters("pdf", lambda, k);
        if (lambda === 0 || k < 0 || k === Number.POSITIVE_INFINITY) {
            return 0;
        }
        else if (k === 0) {
            return Math.exp(-lambda);
        }
        else {
            return Gamma.gamma_p_derivative(k + 1, lambda);
        }
    };
    PoissonDist.cdf = function (k, lambda, lowerTail) {
        var params = PoissonDist.checkParameters("cdf", lambda, k, lowerTail);
        if (lambda === 0) {
            return params.lowerTail ? 0 : 1;
        }
        else if (k < 0) {
            return params.lowerTail ? 0 : 1;
        }
        else if (k === 0) {
            return params.lowerTail ? Math.exp(-lambda) : -Expm1.expm1(-lambda);
        }
        else {
            return params.lowerTail ? Gamma.gamma_q(k + 1, lambda) : Gamma.gamma_p(k + 1, lambda);
        }
    };
    PoissonDist.quantile = function (p, lambda, lowerTail) {
        var params = PoissonDist.checkParameters("quantile", lambda, undefined, lowerTail, p);
        function simplifiedPDF(val) {
            return PoissonDist.pdf(val, lambda);
        }
        function simplifiedCDF(val, lt) {
            return PoissonDist.cdf(val, lambda, lt);
        }
        if (lambda === 0) {
            return 0; // if mean = 0 then p = 0, so k can be anything? return 0 as R does
        }
        else if (p === 0) {
            return params.lowerTail ? 0 : Number.POSITIVE_INFINITY;
        }
        else if (p === 1) {
            return params.lowerTail ? Number.POSITIVE_INFINITY : 0;
        }
        else {
            var max_iter = 500;
            var guess = void 0;
            var factor = 8;
            if (lambda < 1) {
                guess = lambda;
            }
            else {
                guess = GammaInvA.inverse_poisson_cornish_fisher(lambda, params.lowerTail ? p : 1 - p, params.lowerTail ? 1 - p : p);
            }
            if (lambda > 5) {
                if (lambda > 1000) {
                    factor = 1.01;
                }
                else if (lambda > 50) {
                    factor = 1.1;
                }
                else if (guess > 10) {
                    factor = 1.25;
                }
                else {
                    factor = 2;
                }
                if (guess < 1.1) {
                    factor = 8;
                }
            }
            return InvDiscreteQuantile.inverse_discrete_quantile(simplifiedPDF, simplifiedCDF, p, !params.lowerTail, guess, factor, 1, "up", max_iter, Number.POSITIVE_INFINITY, 0);
        }
    };
    PoissonDist.random = function (n, lambda, seed) {
        var params = PoissonDist.checkParameters("random", lambda, undefined, undefined, undefined, n, seed);
        return Random.numbers(n, PoissonDist.quantile, [lambda, true], seed);
    };
    PoissonDist.randomIterator = function (n, lambda, seed) {
        if (typeof n === "undefined" || n === null) {
            n = Number.POSITIVE_INFINITY;
        }
        var params = PoissonDist.checkParameters("randomIterator", lambda, undefined, undefined, undefined, n, seed);
        return Random.numberIterator(n, PoissonDist.quantile, [lambda, true], seed);
    };
    return PoissonDist;
}()); // end of class PoissonDist
exports.PoissonDist = PoissonDist;
