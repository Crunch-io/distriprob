"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * (C) Copyright John Maddock 2006.
 * (C) Copyright Zachary Martin 2016 (port to javascript).
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
var Expm1 = require("./boostPorts/special_functions/expm1").Expm1;
var Log1p = require("./boostPorts/special_functions/log1p").Log1p;
var Random = require("./random").Random;
var check = require("./errorHandling").check;
var ExponentialDist = /** @class */ (function () {
    function ExponentialDist() {
    }
    ExponentialDist.checkParameters = function (functionName, lambda, x, lowerTail, p, n, seed) {
        var params = {
            lowerTail: undefined
        };
        check(lambda, "lambda", "exponential distribution " + functionName, "positive_real");
        if (typeof x !== "undefined") {
            check(x, "x", "exponential distribution " + functionName, "real");
        }
        if (typeof lowerTail !== "undefined" && lowerTail !== null) {
            check(lowerTail, "lowerTail", "exponential distribution " + functionName, "boolean");
            params.lowerTail = lowerTail;
        }
        else {
            params.lowerTail = true;
        }
        if (typeof p !== "undefined") {
            check(p, "p", "exponential distribution " + functionName, "probability");
        }
        if (typeof n !== "undefined") {
            check(n, "n", "exponential distribution " + functionName, "nonnegative_integer");
        }
        if (typeof seed !== "undefined" && seed !== null) {
            check(seed, "seed", "exponential distribution " + functionName, "seed");
        }
        return params;
    };
    ExponentialDist.pdf = function (x, lambda) {
        var params = ExponentialDist.checkParameters("pdf", lambda, x);
        if (x < 0) {
            return 0;
        }
        else if (x === 0) {
            return lambda;
        }
        else {
            return lambda * Math.exp((-lambda) * x);
        }
    };
    ExponentialDist.cdf = function (x, lambda, lowerTail) {
        var params = ExponentialDist.checkParameters("pdf", lambda, x, lowerTail);
        if (x <= 0) {
            if (params.lowerTail) {
                return 0;
            }
            else {
                return 1;
            }
        }
        else {
            if (params.lowerTail) {
                return -Expm1.expm1(-x * lambda);
            }
            else {
                return Math.exp((-lambda) * x);
            }
        }
    };
    ExponentialDist.quantile = function (p, lambda, lowerTail) {
        var params = ExponentialDist.checkParameters("pdf", lambda, undefined, lowerTail, p);
        if (p === 0) {
            if (params.lowerTail) {
                return 0;
            }
            else {
                return Number.POSITIVE_INFINITY;
            }
        }
        else if (p === 1) {
            if (params.lowerTail) {
                return Number.POSITIVE_INFINITY;
            }
            else {
                return 0;
            }
        }
        else {
            if (params.lowerTail) {
                return -Log1p.log1p(-p) / lambda;
            }
            else {
                return -Math.log(p) / lambda;
            }
        }
    };
    ExponentialDist.random = function (n, lambda, seed) {
        var params = ExponentialDist.checkParameters("pdf", lambda, undefined, undefined, undefined, n, seed);
        return Random.numbers(n, ExponentialDist.quantile, [lambda], seed);
    };
    ExponentialDist.randomIterator = function (n, lambda, seed) {
        if (typeof n === "undefined" || n === null) {
            n = Number.POSITIVE_INFINITY;
        }
        var params = ExponentialDist.checkParameters("pdf", lambda, undefined, undefined, undefined, n, seed);
        return Random.numberIterator(n, ExponentialDist.quantile, [lambda], seed);
    };
    return ExponentialDist;
}());
exports.ExponentialDist = ExponentialDist;
