"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * (C) Copyright John Maddock 2005-2006, 2011.
 * (C) Copyright Paul A. Bristow 2006-2011.
 * (C) Copyright Zachary Martin 2016 (port to JavaScript).
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
var Constants = /** @class */ (function () {
    function Constants() {
    }
    // Math.log(Math.PI)
    Constants.LNPI = function () { return 1.1447298858494001741; };
    Constants.LN2 = function () { return 6.931471805599453094172e-01; };
    // Math.log(Math.sqrt(2 * Math.PI))
    Constants.LNSQRTTWOPI = function () { return 0.9189385332046727418; };
    // Math.sqrt(2 * Math.PI)
    Constants.SQRTTWOPI = function () { return 2.5066282746310005024; };
    // Euler-Mascheroni constant
    Constants.EULMASC = function () { return 0.5772156649015328606; };
    // Math.sqrt(Math.PI)
    Constants.SQRTPI = function () { return 1.7724538509055160272; };
    // Math.sqrt(2)
    Constants.SQRT2 = function () { return 1.4142135623730950488; };
    // Math.sqrt(3)
    Constants.SQRT3 = function () { return 1.7320508075688772935e+00; };
    // Math.PI/2
    Constants.HALFPI = function () { return 1.5707963267948966192; };
    // 1 / Math.sqrt(2)
    Constants.ONEDIVROOTTWO = function () { return 7.0710678118654752e-01; };
    // 1 / Math.sqrt(2 * Math.PI)
    Constants.ONEDIVROOTTWOPI = function () { return 3.989422804014326779e-01; };
    // 1 / Math.sqrt(2 * Math.PI)
    Constants.ONEDIVTWOPI = function () { return 1.59154943091895336e-01; };
    // 2 * Math.PI
    Constants.TWOPI = function () { return 6.28318530717958647692528676655e+00; };
    // 2 / Math.PI
    Constants.TWODIVPI = function () { return 6.3661977236758134307553505349005e-01; };
    // (Math.sqrt(2 / Math.PI)
    Constants.SQRTTWODIVPI = function () { return 7.97884560802865355879892119868e-01; };
    // Math.log(Math.sqrt(2*Math.PI))
    Constants.LOGROOT2PI = function () { return 9.18938533204672741780329736405e-01; };
    // 1 / Math.sqrt(Math.PI)
    Constants.ONEDIVSQRTPI = function () { return 5.641895835477562869480e-01; };
    return Constants;
}());
exports.Constants = Constants;
