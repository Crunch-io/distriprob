"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * (C) Copyright John Maddock 2006.
 * (C) Copyright Zachary Martin 2016 (port to javascript).
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
var Expm1 = require("./expm1").Expm1;
var Precision = require("../tools/precision").Precision;
var Powm1 = /** @class */ (function () {
    function Powm1() {
    }
    Powm1.powm1 = function (x, y) {
        if (x > 0) {
            if ((Math.abs(y * (x - 1)) < 0.5) || (Math.abs(y) < 0.2)) {
                // We don't have any good/quick approximation for log(x) * y
                // so just try it and see:
                var l = y * Math.log(x);
                if (l < 0.5) {
                    return Expm1.expm1(l);
                }
                if (l > Precision.log_max_value()) {
                    throw new Error("Overflow error");
                }
                // fall through....
            }
        }
        else {
            // y had better be an integer:
            if (Math.trunc(y) !== y) {
                throw new Error("Domain error: For non-integral exponent, expected base > 0 but got " + x);
            }
            if (Math.trunc(y / 2) === y / 2) {
                return Powm1.powm1(-x, y);
            }
        }
        return Math.pow(x, y) - 1;
    };
    return Powm1;
}());
exports.Powm1 = Powm1;
