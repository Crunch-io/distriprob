"use strict";
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * (C) Copyright Zachary Martin 2016.
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
var UncheckedBernoulli = require("./detail/unchecked_bernoulli").UncheckedBernoulli;
var Bernoulli = /** @class */ (function () {
    function Bernoulli() {
    }
    Bernoulli.bernoulli_b2n_gen = function (startIndex, numBernoullis) {
        var i;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (startIndex + numBernoullis - 1 > UncheckedBernoulli.max_bernoulli_b2n()) {
                        throw new Error("Overflow error: the sum of \"startIndex\" and \"numBernoullis\"" + "" + " less one cannot exceed " + UncheckedBernoulli.max_bernoulli_b2n() + ".");
                    }
                    i = startIndex;
                    _a.label = 1;
                case 1:
                    if (!(i < startIndex + numBernoullis)) return [3 /*break*/, 4];
                    return [4 /*yield*/, UncheckedBernoulli.unchecked_bernoulli_b2n(i)];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    i++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/];
            }
        });
    };
    // implementation of all overloads
    Bernoulli.bernoulli_b2n = function (arg1, arg2) {
        if (typeof arg1 === "undefined" && typeof arg2 === "undefined") {
            // iterable return case 1
            return Bernoulli.bernoulli_b2n_gen(0, UncheckedBernoulli.max_bernoulli_b2n() + 1);
        }
        else if (typeof arg1 === "number" && typeof arg2 === "number") {
            // iterable return case 2
            return Bernoulli.bernoulli_b2n_gen(arg1, arg2);
        }
        else if (typeof arg1 === "number") {
            // number return case
            return UncheckedBernoulli.unchecked_bernoulli_b2n(arg1);
        }
        else {
            throw new Error("Incorrect arguments error");
        }
    };
    Bernoulli.bernoulli_val = function (n, type) {
        if (type === void 0) { type = "first"; }
        if (n % 2 === 0) {
            if (n / 2 > UncheckedBernoulli.max_bernoulli_b2n()) {
                throw new Error("Overflow error: cannot return even bernoulli number for index" + "" + " greater than " + UncheckedBernoulli.max_bernoulli_b2n() * 2 + ", given n = " + n);
            }
            return UncheckedBernoulli.unchecked_bernoulli_b2n(n / 2);
        }
        else if (n === 1) {
            return type === "first" ? -0.5 : 0.5;
        }
        else {
            return 0;
        }
    };
    Bernoulli.bernoulli_gen = function (startIndex, numBernoullis, type) {
        if (type === void 0) { type = "first"; }
        var i;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (startIndex + numBernoullis > UncheckedBernoulli.max_bernoulli_b2n() * 2 + 2) {
                        throw new Error("Overflow error: the sum of \"startIndex\" and \"numBernoullis\"" + "" + " less one cannot exceed " + (UncheckedBernoulli.max_bernoulli_b2n() * 2 + 2) + ".");
                    }
                    i = startIndex;
                    _a.label = 1;
                case 1:
                    if (!(i < startIndex + numBernoullis)) return [3 /*break*/, 4];
                    return [4 /*yield*/, Bernoulli.bernoulli_val(i, type)];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    i++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/];
            }
        });
    };
    // implementation of overload
    Bernoulli.bernoulli = function (arg1, arg2, arg3) {
        if ((arg1 === "first" || arg1 === "second" || typeof arg1 === "undefined") &&
            typeof arg2 === "undefined" &&
            typeof arg3 === "undefined") {
            // iterable return case 1
            if (!arg1) {
                arg1 = "first";
            }
            return Bernoulli.bernoulli_gen(0, UncheckedBernoulli.max_bernoulli_b2n() * 2 + 2, arg1);
        }
        else if (typeof arg1 === "number" && typeof arg2 === "number" &&
            (typeof arg3 === "undefined" || arg3 === "first" || arg3 === "second")) {
            // iterable return case 2
            if (!arg3) {
                arg3 = "first";
            }
            return Bernoulli.bernoulli_gen(arg1, arg2, arg3);
        }
        else if (typeof arg1 === "number" &&
            (typeof arg2 === "undefined" || arg2 === "first" || arg2 === "second") &&
            typeof arg3 === "undefined") {
            if (!arg2) {
                arg2 = "first";
            }
            return Bernoulli.bernoulli_val(arg1, arg2);
        }
        else {
            throw new Error("Incorrect arguments error");
        }
    };
    Bernoulli.max_tangent = function () { return 93; };
    Bernoulli.tangent_val = function (n) {
        var twoTo2n = Math.pow(2, 2 * n);
        var b2n = Bernoulli.bernoulli_b2n(n);
        return (twoTo2n * (twoTo2n - 1) * Math.abs(b2n)) / (2 * n);
    };
    Bernoulli.tangent_gen = function (startIndex, numTangents) {
        var i;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (startIndex + numTangents > Bernoulli.max_tangent() + 1) {
                        throw new Error("Overflow error: the sum of \"startIndex\" and \"numTangents\"" + "" + " less one cannot exceed " + (Bernoulli.max_tangent() + 1) + ".");
                    }
                    i = startIndex;
                    _a.label = 1;
                case 1:
                    if (!(i < startIndex + numTangents)) return [3 /*break*/, 4];
                    return [4 /*yield*/, Bernoulli.tangent_val(i)];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    i++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/];
            }
        });
    };
    Bernoulli.tangent = function (arg1, arg2) {
        if (typeof arg1 === "undefined" && typeof arg2 === "undefined") {
            // iterable return case 1
            return Bernoulli.tangent_gen(1, Bernoulli.max_tangent());
        }
        else if (typeof arg1 === "number" && typeof arg2 === "number") {
            // iterable return case 2
            return Bernoulli.tangent_gen(arg1, arg2);
        }
        else if (typeof arg1 === "number" && typeof arg2 === "undefined") {
            return Bernoulli.tangent_val(arg1);
        }
        else {
            throw new Error("Incorrect arguments error");
        }
    };
    return Bernoulli;
}());
exports.Bernoulli = Bernoulli;
