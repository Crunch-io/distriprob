"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * (C) Copyright Xiaogang Zhang 2006.
 * (C) Copyright Zachary Martin 2016 (port to javascript).
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
var Rational = require("../../tools/rational").Rational;
var BesselK1 = /** @class */ (function () {
    function BesselK1() {
    }
    BesselK1.bessel_k1 = function (x) {
        var P1 = [
            -2.2149374878243304548e+06,
            7.1938920065420586101e+05,
            1.7733324035147015630e+05,
            7.1885382604084798576e+03,
            9.9991373567429309922e+01,
            4.8127070456878442310e-01
        ];
        var Q1 = [
            -2.2149374878243304548e+06,
            3.7264298672067697862e+04,
            -2.8143915754538725829e+02,
            1.0
        ];
        var P2 = [
            0.0,
            -1.3531161492785421328e+06,
            -1.4758069205414222471e+05,
            -4.5051623763436087023e+03,
            -5.3103913335180275253e+01,
            -2.2795590826955002390e-01
        ];
        var Q2 = [
            -2.7062322985570842656e+06,
            4.3117653211351080007e+04,
            -3.0507151578787595807e+02,
            1.0
        ];
        var P3 = [
            2.2196792496874548962e+00,
            4.4137176114230414036e+01,
            3.4122953486801312910e+02,
            1.3319486433183221990e+03,
            2.8590657697910288226e+03,
            3.4540675585544584407e+03,
            2.3123742209168871550e+03,
            8.1094256146537402173e+02,
            1.3182609918569941308e+02,
            7.5584584631176030810e+00,
            6.4257745859173138767e-02
        ];
        var Q3 = [
            1.7710478032601086579e+00,
            3.4552228452758912848e+01,
            2.5951223655579051357e+02,
            9.6929165726802648634e+02,
            1.9448440788918006154e+03,
            2.1181000487171943810e+03,
            1.2082692316002348638e+03,
            3.3031020088765390854e+02,
            3.6001069306861518855e+01,
            1.0
        ];
        var value, factor, r, r1, r2;
        if (x < 0) {
            throw new Error("Domain error: Got x = " + x + ", but argument x must be" + "" + " non-negative, complex number result not supported.");
        }
        if (x === 0) {
            throw new Error("Overflow error");
        }
        if (x <= 1) {
            var y = x * x;
            r1 = Rational.evaluate_polynomial(P1, y) /
                Rational.evaluate_polynomial(Q1, y);
            r2 = Rational.evaluate_polynomial(P2, y) /
                Rational.evaluate_polynomial(Q2, y);
            factor = Math.log(x);
            value = (r1 + factor * r2) / x;
        }
        else {
            var y = 1 / x;
            r = Rational.evaluate_polynomial(P3, y) /
                Rational.evaluate_polynomial(Q3, y);
            factor = Math.exp(-x) / Math.sqrt(x);
            value = factor * r;
        }
        return value;
    };
    return BesselK1;
}());
exports.BesselK1 = BesselK1;
