"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * (C) Copyright Xiaogang Zhang 2006.
 * (C) Copyright Zachary Martin 2016 (port to javascript).
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
var Rational = require("../../tools/rational").Rational;
var BesselI0 = /** @class */ (function () {
    function BesselI0() {
    }
    BesselI0.bessel_i0 = function (x) {
        var P1 = [
            -2.2335582639474375249e+15,
            -5.5050369673018427753e+14,
            -3.2940087627407749166e+13,
            -8.4925101247114157499e+11,
            -1.1912746104985237192e+10,
            -1.0313066708737980747e+08,
            -5.9545626019847898221e+05,
            -2.4125195876041896775e+03,
            -7.0935347449210549190e+00,
            -1.5453977791786851041e-02,
            -2.5172644670688975051e-05,
            -3.0517226450451067446e-08,
            -2.6843448573468483278e-11,
            -1.5982226675653184646e-14,
            -5.2487866627945699800e-18,
        ];
        var Q1 = [
            -2.2335582639474375245e+15,
            7.8858692566751002988e+12,
            -1.2207067397808979846e+10,
            1.0377081058062166144e+07,
            -4.8527560179962773045e+03,
            1.0,
        ];
        var P2 = [
            -2.2210262233306573296e-04,
            1.3067392038106924055e-02,
            -4.4700805721174453923e-01,
            5.5674518371240761397e+00,
            -2.3517945679239481621e+01,
            3.1611322818701131207e+01,
            -9.6090021968656180000e+00,
        ];
        var Q2 = [
            -5.5194330231005480228e-04,
            3.2547697594819615062e-02,
            -1.1151759188741312645e+00,
            1.3982595353892851542e+01,
            -6.0228002066743340583e+01,
            8.5539563258012929600e+01,
            -3.1446690275135491500e+01,
            1.0,
        ];
        var value, factor, r;
        if (x === 0) {
            return 1;
        }
        if (x <= 15) {
            var y = x * x;
            value = Rational.evaluate_polynomial(P1, y) /
                Rational.evaluate_polynomial(Q1, y);
        }
        else {
            var y = 1 / x - 1 / 15;
            r = Rational.evaluate_polynomial(P2, y) /
                Rational.evaluate_polynomial(Q2, y);
            factor = Math.exp(x) / Math.sqrt(x);
            value = factor * r;
        }
        return value;
    };
    return BesselI0;
}());
exports.BesselI0 = BesselI0;
