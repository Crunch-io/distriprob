"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * (C) Copyright Anton Bikineev 2013.
 * (C) Copyright Zachary Martin 2016 (port to javascript).
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
var Bessel = require("../bessel").Bessel;
var BesselDerivativesLinear = /** @class */ (function () {
    function BesselDerivativesLinear() {
    }
    BesselDerivativesLinear.bessel_j_derivative_linear = function (v, x) {
        return (Bessel.cyl_bessel_j_imp_maybe_int(v - 1, x) -
            Bessel.cyl_bessel_j_imp_maybe_int(v + 1, x)) / 2;
    };
    BesselDerivativesLinear.bessel_j_derivative_linear_int = function (v, x) {
        return (Bessel.cyl_bessel_j_imp_int(Math.trunc(v - 1), x) -
            Bessel.cyl_bessel_j_imp_int(Math.trunc(v + 1), x)) / 2;
    };
    BesselDerivativesLinear.sph_bessel_j_derivative_linear = function (v, x) {
        return (v / x) * Bessel.sph_bessel_j_imp(v, x) -
            Bessel.sph_bessel_j_imp(v + 1, x);
    };
    BesselDerivativesLinear.bessel_i_derivative_linear = function (v, x) {
        var result = Bessel.cyl_bessel_i_imp(v - 1, x);
        if (result >= Number.MAX_VALUE) {
            return result; // result is infinite
        }
        var result2 = Bessel.cyl_bessel_i_imp(v + 1, x);
        if (result2 >= Number.MAX_VALUE - result) {
            return result2; // result is infinite
        }
        return (result + result2) / 2;
    };
    BesselDerivativesLinear.bessel_k_derivative_linear = function (v, x) {
        var result = Bessel.cyl_bessel_k_imp_maybe_int(v - 1, x);
        if (result >= Number.MAX_VALUE) {
            return -result; // result is infinite
        }
        var result2 = Bessel.cyl_bessel_k_imp_maybe_int(v + 1, x);
        if (result2 >= Number.MAX_VALUE - result) {
            return -result2; // result is infinite
        }
        return (result + result2) / -2;
    };
    BesselDerivativesLinear.bessel_k_derivative_linear_int = function (v, x) {
        return (Bessel.cyl_bessel_k_imp_int(Math.trunc(v - 1), x) +
            Bessel.cyl_bessel_k_imp_int(Math.trunc(v + 1), x)) / -2;
    };
    BesselDerivativesLinear.bessel_y_derivative_linear = function (v, x) {
        return (Bessel.cyl_neumann_imp_maybe_int(v - 1, x) -
            Bessel.cyl_neumann_imp_maybe_int(v + 1, x)) / 2;
    };
    BesselDerivativesLinear.bessel_y_derivative_linear_int = function (v, x) {
        return (Bessel.cyl_neumann_imp_int(Math.trunc(v - 1), x) -
            Bessel.cyl_neumann_imp_int(Math.trunc(v + 1), x)) / 2;
    };
    BesselDerivativesLinear.sph_neumann_derivative_linear = function (v, x) {
        return (v / x) * Bessel.sph_neumann_imp(v, x) -
            Bessel.sph_neumann_imp(v + 1, x);
    };
    return BesselDerivativesLinear;
}());
exports.BesselDerivativesLinear = BesselDerivativesLinear;
