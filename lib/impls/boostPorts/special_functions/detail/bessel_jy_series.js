"use strict";
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * (C) Copyright John Maddock 2011.
 * (C) Copyright Zachary Martin 2016 (port to javascript).
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
var UncheckedFactorial = require("./unchecked_factorial").UncheckedFactorial;
var Gamma = require("../gamma").Gamma;
var Series = require("../../tools/series").Series;
var Precision = require("../../tools/precision").Precision;
var CosPI = require("../cos_pi").CosPI;
var BesselJYSeries = /** @class */ (function () {
    function BesselJYSeries() {
    }
    BesselJYSeries.bessel_j_small_z_series_term = function (v, x) {
        var N, mult, term, r;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    N = 0;
                    mult = x / 2;
                    mult *= -mult;
                    term = 1;
                    _a.label = 1;
                case 1:
                    if (!true) return [3 /*break*/, 3];
                    r = term;
                    N++;
                    term *= mult / (N * (N + v));
                    return [4 /*yield*/, r];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 1];
                case 3: return [2 /*return*/];
            }
        });
    };
    /**
     * Series evaluation for BesselJ(v, z) as z -> 0.
     * See http://functions.wolfram.com/Bessel-TypeFunctions/BesselJ/06/01/04/01/01/0003/
     * Converges rapidly for all z << v.
     */
    BesselJYSeries.bessel_j_small_z_series = function (v, x) {
        var prefix;
        if (v < UncheckedFactorial.max_factorial()) {
            prefix = Math.pow(x / 2, v) / Gamma.tgamma(v + 1);
        }
        else {
            prefix = v * Math.log(x / 2) - Gamma.lgamma(v + 1).result;
            prefix = Math.exp(prefix);
        }
        if (0 === prefix) {
            return prefix;
        }
        var s = BesselJYSeries.bessel_j_small_z_series_term(v, x);
        var max_iter = 500;
        var result = Series.sum_series(s, Precision.epsilon(), max_iter, 0).sum;
        return prefix * result;
    };
    BesselJYSeries.bessel_y_small_z_series_term_a = function (v, x) {
        var N, mult, term, r;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    N = 0;
                    mult = x / 2;
                    mult *= -mult;
                    term = 1;
                    _a.label = 1;
                case 1:
                    if (!true) return [3 /*break*/, 3];
                    r = term;
                    N++;
                    term *= mult / (N * (N - v));
                    return [4 /*yield*/, r];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 1];
                case 3: return [2 /*return*/];
            }
        });
    };
    BesselJYSeries.bessel_y_small_z_series_term_b = function (v, x) {
        var N, mult, term, r;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    N = 0;
                    mult = x / 2;
                    mult *= -mult;
                    term = 1;
                    _a.label = 1;
                case 1:
                    if (!true) return [3 /*break*/, 3];
                    r = term;
                    ++N;
                    term *= mult / (N * (N + v));
                    return [4 /*yield*/, r];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 1];
                case 3: return [2 /*return*/];
            }
        });
    };
    /**
     * Series form for BesselY as z -> 0,
     * see: http://functions.wolfram.com/Bessel-TypeFunctions/BesselY/06/01/04/01/01/0003/
     * This series is only useful when the second term is small compared to the first
     * otherwise we get catestrophic cancellation errors.
     *
     * Approximating tgamma(v) by v^v, and assuming |tgamma(-z)| < eps we end up requiring:
     * eps/2 * v^v(x/2)^-v > (x/2)^v or log(eps/2) > v log((x/2)^2/v)
     */
    BesselJYSeries.bessel_y_small_z_series = function (v, x) {
        var prefix;
        var gam;
        var p = Math.log(x / 2);
        var scale = 1;
        var need_logs = (v >= UncheckedFactorial.max_factorial()) ||
            (Precision.log_max_value() / v < Math.abs(p));
        if (!need_logs) {
            gam = Gamma.tgamma(v);
            p = Math.pow(x / 2, v);
            if (Number.MAX_VALUE * p < gam) {
                scale /= gam;
                gam = 1;
                if (Number.MAX_VALUE * p < gam) {
                    throw new Error("Overflow error");
                }
            }
            prefix = -gam / (Math.PI * p);
        }
        else {
            gam = Gamma.lgamma(v).result;
            p = v * p;
            prefix = gam - Math.log(Math.PI) - p;
            if (Precision.log_max_value() < prefix) {
                prefix -= Math.log(Number.MAX_VALUE / 4);
                scale /= (Number.MAX_VALUE / 4);
                if (Precision.log_max_value() < prefix) {
                    throw new Error("Overflow error");
                }
            }
            prefix = -Math.exp(prefix);
        }
        var s = BesselJYSeries.bessel_y_small_z_series_term_a(v, x);
        var max_iter = 500;
        var pscale = scale;
        var result = Series.sum_series(s, Precision.epsilon(), max_iter, 0).sum;
        result *= prefix;
        if (!need_logs) {
            prefix = Gamma.tgamma(-v) * CosPI.cos_pi(v) * p / Math.PI;
        }
        else {
            var lgamResultObj = Gamma.lgamma(-v);
            var sgn = lgamResultObj.sign;
            prefix = lgamResultObj.result + p;
            prefix = Math.exp(prefix) * sgn / Math.PI;
        }
        var s2 = BesselJYSeries.bessel_y_small_z_series_term_b(v, x);
        var b = Series.sum_series(s2, Precision.epsilon(), max_iter, 0).sum;
        result -= scale * prefix * b;
        return { result: result, pscale: pscale };
    };
    BesselJYSeries.bessel_yn_small_z = function (n, z, scale) {
        //
        // See http://functions.wolfram.com/Bessel-TypeFunctions/BesselY/06/01/04/01/02/
        //
        // Note that when called we assume that x < epsilon and n is a positive integer.
        //
        if (n === 0) {
            return {
                result: (2 / Math.PI) * (Math.log(z / 2) + Math.E),
                scale: scale
            };
        }
        else if (n === 1) {
            return {
                result: (z / Math.PI) * Math.log(z / 2) - 2 / (Math.PI * z) - (z / (2 * Math.PI)) * (1 - 2 * Math.E),
                scale: scale
            };
        }
        else if (n === 2) {
            return {
                result: (z * z) / (4 * Math.PI) * Math.log(z / 2) - (4 / (Math.PI * z * z)) -
                    ((z * z) / (8 * Math.PI)) * (3 / 2 - 2 * Math.E),
                scale: scale
            };
        }
        else {
            var p = Math.pow(z / 2, n);
            var result = -((UncheckedFactorial.unchecked_factorial(n - 1) / Math.PI));
            if (p * Number.MAX_VALUE < result) {
                var div = Number.MAX_VALUE / 8;
                result /= div;
                scale /= div;
                if (p * Number.MAX_VALUE < result) {
                    throw new Error("Overflow error");
                }
            }
            return { result: result / p, scale: scale };
        }
    };
    return BesselJYSeries;
}());
exports.BesselJYSeries = BesselJYSeries;
