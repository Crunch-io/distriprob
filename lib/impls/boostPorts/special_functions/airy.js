"use strict";
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * (C) Copyright John Maddock 2012.
 * (C) Copyright Christopher Kormanyos 2013.
 * (C) Copyright Zachary Martin 2016 (port to javascript).
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
var Bessel = require("./bessel").Bessel;
var Precision = require("../tools/precision").Precision;
var Gamma = require("./gamma").Gamma;
var Constants = require("../tools/constants").Constants;
var Roots = require("../tools/roots").Roots;
var AiryAiBiZero = require("./detail/airy_ai_bi_zero").AiryAiBiZero;
var Airy = /** @class */ (function () {
    function Airy() {
    }
    Airy.function_object_ai_and_ai_prime = function (x) {
        return {
            f0: Airy.airy_ai(x),
            f1: Airy.airy_ai_prime(x)
        };
    };
    Airy.function_object_bi_and_bi_prime = function (x) {
        return {
            f0: Airy.airy_bi(x),
            f1: Airy.airy_bi_prime(x)
        };
    };
    Airy.airy_ai_imp = function (x) {
        if (x < 0) {
            var p = (-x * Math.sqrt(-x) * 2) / 3;
            var v = 1 / 3;
            var j1 = Bessel.cyl_bessel_j(v, p);
            var j2 = Bessel.cyl_bessel_j(-v, p);
            var ai = Math.sqrt(-x) * (j1 + j2) / 3;
            //T bi = sqrt(-x / 3) * (j2 - j1);
            return ai;
        }
        else if (Math.abs(x * x * x) / 6 < Precision.epsilon()) {
            var tg = Gamma.tgamma(2 / 3);
            var ai = 1 / (Math.pow(3, 2 / 3) * tg);
            //T bi = 1 / (sqrt(boost::math::cbrt(T(3))) * tg);
            return ai;
        }
        else {
            var p = 2 * x * Math.sqrt(x) / 3;
            var v = 1 / 3;
            //T j1 = boost::math::cyl_bessel_i(-v, p, pol);
            //T j2 = boost::math::cyl_bessel_i(v, p, pol);
            //
            // Note that although we can calculate ai from j1 and j2, the accuracy is horrible
            // as we're subtracting two very large values, so use the Bessel K relation instead:
            //
            var ai = Bessel.cyl_bessel_k(v, p) * Math.sqrt(x / 3) / Math.PI;
            //T bi = sqrt(x / 3) * (j1 + j2);
            return ai;
        }
    };
    Airy.airy_bi_imp = function (x) {
        if (x < 0) {
            var p = (-x * Math.sqrt(-x) * 2) / 3;
            var v = 1 / 3;
            var j1 = Bessel.cyl_bessel_j(v, p);
            var j2 = Bessel.cyl_bessel_j(-v, p);
            //T ai = sqrt(-x) * (j1 + j2) / 3;
            var bi = Math.sqrt(-x / 3) * (j2 - j1);
            return bi;
        }
        else if (Math.abs(x * x * x) / 6 < Precision.epsilon()) {
            var tg = Gamma.tgamma(2 / 3);
            //T ai = 1 / (pow(T(3), constants::twothirds<T>()) * tg);
            var bi = 1 / (Math.sqrt(Math.cbrt(3)) * tg);
            return bi;
        }
        else {
            var p = 2 * x * Math.sqrt(x) / 3;
            var v = 1 / 3;
            var j1 = Bessel.cyl_bessel_i(-v, p);
            var j2 = Bessel.cyl_bessel_i(v, p);
            var bi = Math.sqrt(x / 3) * (j1 + j2);
            return bi;
        }
    };
    Airy.airy_ai_prime_imp = function (x) {
        if (x < 0) {
            var p = (-x * Math.sqrt(-x) * 2) / 3;
            var v = 2 / 3;
            var j1 = Bessel.cyl_bessel_j(v, p);
            var j2 = Bessel.cyl_bessel_j(-v, p);
            var aip = -x * (j1 - j2) / 3;
            return aip;
        }
        else if (Math.abs(x * x) / 2 < Precision.epsilon()) {
            var tg = Gamma.tgamma(1 / 3);
            var aip = 1 / (Math.cbrt(3) * tg);
            return -aip;
        }
        else {
            var p = 2 * x * Math.sqrt(x) / 3;
            var v = 2 / 3;
            //T j1 = boost::math::cyl_bessel_i(-v, p, pol);
            //T j2 = boost::math::cyl_bessel_i(v, p, pol);
            //
            // Note that although we can calculate ai from j1 and j2, the accuracy is horrible
            // as we're subtracting two very large values, so use the Bessel K relation instead:
            //
            var aip = -Bessel.cyl_bessel_k(v, p) * x / (Constants.SQRT3() * Math.PI);
            return aip;
        }
    };
    Airy.airy_bi_prime_imp = function (x) {
        if (x < 0) {
            var p = (-x * Math.sqrt(-x) * 2) / 3;
            var v = 2 / 3;
            var j1 = Bessel.cyl_bessel_j(v, p);
            var j2 = Bessel.cyl_bessel_j(-v, p);
            var aip = -x * (j1 + j2) / Constants.SQRT3();
            return aip;
        }
        else if (Math.abs(x * x) / 2 < Precision.epsilon()) {
            var tg = Gamma.tgamma(1 / 3);
            var bip = Math.sqrt(Math.cbrt(3)) / tg;
            return bip;
        }
        else {
            var p = 2 * x * Math.sqrt(x) / 3;
            var v = 2 / 3;
            var j1 = Bessel.cyl_bessel_i(-v, p);
            var j2 = Bessel.cyl_bessel_i(v, p);
            var aip = x * (j1 + j2) / Constants.SQRT3();
            return aip;
        }
    };
    Airy.airy_ai_zero_imp = function (m) {
        // Handle cases when a negative zero (negative rank) is requested.
        if (m < 0) {
            throw new Error("Domain error: Requested the " + m + "'th zero, but the rank must be" + "" + " 1 or more !");
        }
        // Handle case when the zero'th zero is requested.
        if (m === 0) {
            throw new Error("Domain error: The requested rank of the zero is " + m + ", but must" + "" + " be 1 or more !");
        }
        // Set up the initial guess for the upcoming root-finding.
        var guess_root = AiryAiBiZero.initial_guess_ai(m);
        // Select the maximum allowed iterations based on the number
        // of decimal digits in the numeric type T, being at least 12.
        var my_digits10 = Math.round(53 * 0.301);
        var iterations_allowed = Math.max(12, my_digits10 * 2);
        var iterations_used = iterations_allowed;
        // Use a dynamic tolerance because the roots get closer the higher m gets.
        var tolerance;
        if (m <= 10) {
            tolerance = 0.3;
        }
        else if (m <= 100) {
            tolerance = 0.1;
        }
        else if (m <= 1000) {
            tolerance = 0.05;
        }
        else {
            tolerance = 1 / Math.sqrt(m);
        }
        // Perform the root-finding using Newton-Raphson iteration from Boost.Math.
        var am = Roots.newton_raphson_iterate(Airy.function_object_ai_and_ai_prime, guess_root, guess_root - tolerance, guess_root + tolerance, 53, iterations_used);
        return am.result;
    };
    Airy.airy_ai_zero_gen = function (startIndex, numZeros) {
        var m, end;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    m = typeof startIndex === "number" ? startIndex : 1;
                    end = typeof numZeros === "number" ? m + numZeros : Number.POSITIVE_INFINITY;
                    _a.label = 1;
                case 1:
                    if (!(m < end)) return [3 /*break*/, 3];
                    return [4 /*yield*/, Airy.airy_ai_zero_imp(m)];
                case 2:
                    _a.sent();
                    m++;
                    return [3 /*break*/, 1];
                case 3: return [2 /*return*/];
            }
        });
    };
    Airy.airy_bi_zero_imp = function (m) {
        // Handle cases when a negative zero (negative rank) is requested.
        if (m < 0) {
            throw new Error("Domain error: Requested the " + m + "'th zero, but the rank must be" + "" + " 1 or more !");
        }
        // Handle case when the zero'th zero is requested.
        if (m === 0) {
            throw new Error("Domain error: The requested rank of the zero is " + m + ", but must" + "" + " be 1 or more !");
        }
        // Set up the initial guess for the upcoming root-finding.
        var guess_root = AiryAiBiZero.initial_guess_bi(m);
        // Select the maximum allowed iterations based on the number
        // of decimal digits in the numeric type T, being at least 12.
        var my_digits10 = Math.round(53 * 0.301);
        var iterations_allowed = Math.max(12, my_digits10 * 2);
        var iterations_used = iterations_allowed;
        // Use a dynamic tolerance because the roots get closer the higher m gets.
        var tolerance;
        if (m <= 10) {
            tolerance = 0.3;
        }
        else if (m <= 100) {
            tolerance = 0.1;
        }
        else if (m <= 1000) {
            tolerance = 0.05;
        }
        else {
            tolerance = 1 / Math.sqrt(m);
        }
        // Perform the root-finding using Newton-Raphson iteration from Boost.Math.
        var bm = Roots.newton_raphson_iterate(Airy.function_object_bi_and_bi_prime, guess_root, guess_root - tolerance, guess_root + tolerance, 53, iterations_used);
        return bm.result;
    };
    Airy.airy_bi_zero_gen = function (startIndex, numZeros) {
        var m, end;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    m = typeof startIndex === "number" ? startIndex : 1;
                    end = typeof numZeros === "number" ? m + numZeros : Number.POSITIVE_INFINITY;
                    _a.label = 1;
                case 1:
                    if (!(m < end)) return [3 /*break*/, 3];
                    return [4 /*yield*/, Airy.airy_bi_zero_imp(m)];
                case 2:
                    _a.sent();
                    m++;
                    return [3 /*break*/, 1];
                case 3: return [2 /*return*/];
            }
        });
    };
    Airy.airy_ai = function (x) {
        return Airy.airy_ai_imp(x);
    };
    Airy.airy_bi = function (x) {
        return Airy.airy_bi_imp(x);
    };
    Airy.airy_ai_prime = function (x) {
        return Airy.airy_ai_prime_imp(x);
    };
    Airy.airy_bi_prime = function (x) {
        return Airy.airy_bi_prime_imp(x);
    };
    Airy.airy_ai_zero = function (m) {
        return Airy.airy_ai_zero_imp(m);
    };
    Airy.airy_ai_zeros_iter = function (startIndex, numZeros) {
        if (typeof startIndex === "number") {
            if (startIndex !== Math.trunc(startIndex)) {
                throw new Error("Domain error: got startIndex = " + startIndex + ", start index" + "" + " must be a positive integer.");
            }
        }
        if (typeof numZeros === "number") {
            if (numZeros !== Math.trunc(numZeros)) {
                throw new Error("Domain error: got numZeros = " + numZeros + ", number of zeros" + "" + " must be a positive integer.");
            }
        }
        return Airy.airy_ai_zero_gen(startIndex, numZeros);
    };
    Airy.airy_bi_zero = function (m) {
        return Airy.airy_bi_zero_imp(m);
    };
    Airy.airy_bi_zeros_iter = function (startIndex, numZeros) {
        if (typeof startIndex === "number") {
            if (startIndex !== Math.trunc(startIndex)) {
                throw new Error("Domain error: got startIndex = " + startIndex + ", start index" + "" + " must be a positive integer.");
            }
        }
        if (typeof numZeros === "number") {
            if (numZeros !== Math.trunc(numZeros)) {
                throw new Error("Domain error: got numZeros = " + numZeros + ", number of zeros" + "" + " must be a positive integer.");
            }
        }
        return Airy.airy_bi_zero_gen(startIndex, numZeros);
    };
    return Airy;
}());
exports.Airy = Airy;
