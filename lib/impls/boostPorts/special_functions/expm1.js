"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * (C) Copyright John Maddock 2006.
 * (C) Copyright Zachary Martin 2016 (port to javascript).
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
var Precision = require("../tools/precision").Precision;
var Rational = require("../tools/rational").Rational;
var Expm1 = /** @class */ (function () {
    function Expm1() {
    }
    /**
     * exp(x) - 1
     */
    Expm1.expm1 = function (x) {
        var a = Math.abs(x);
        if (a > 0.5) {
            if (a >= Precision.log_max_value()) {
                if (x > 0) {
                    throw new Error("overflow error");
                }
                return -1;
            }
            return Math.exp(x) - 1;
        }
        if (a < Precision.epsilon()) {
            return x;
        }
        var Y = 0.10281276702880859375e1;
        var n = [
            -0.281276702880859375e-1,
            0.512980290285154286358e0,
            -0.667758794592881019644e-1,
            0.131432469658444745835e-1,
            -0.72303795326880286965e-3,
            0.447441185192951335042e-4,
            -0.714539134024984593011e-6
        ];
        var d = [
            1.0,
            -0.461477618025562520389e0,
            0.961237488025708540713e-1,
            -0.116483957658204450739e-1,
            0.873308008461557544458e-3,
            -0.387922804997682392562e-4,
            0.807473180049193557294e-6
        ];
        return x * Y + x * Rational.evaluate_polynomial(n, x) /
            Rational.evaluate_polynomial(d, x);
    };
    return Expm1;
}());
exports.Expm1 = Expm1;
