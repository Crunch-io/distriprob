"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * (C) Copyright Anton Bikineev 2013.
 * (C) Copyright Zachary Martin 2016 (port to javascript).
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
var Bessel = require("./bessel").Bessel;
var BesselJYDerivativesAsym = require("./detail/bessel_jy_derivatives_asym").BesselJYDerivativesAsym;
var BesselJYDerivativesSeries = require("./detail/bessel_jy_derivatives_series").BesselJYDerivativesSeries;
var BesselDerivativesLinear = require("./detail/bessel_derivatives_linear").BesselDerivativesLinear;
var Precision = require("../tools/precision").Precision;
var BoostBesselPrime = /** @class */ (function () {
    function BoostBesselPrime() {
    }
    BoostBesselPrime.cyl_bessel_j_prime = function (v, x) {
        //
        // Prevent complex result:
        //
        if (x < 0 && Math.floor(v) !== v) {
            throw new Error("Domain error: Got x = " + x + ", but function requires x >= 0");
        }
        //
        // Special cases for x == 0:
        //
        if (x === 0) {
            if (v === 1) {
                return 0.5;
            }
            else if (v === -1) {
                return -0.5;
            }
            else if (Math.floor(v) === v || v > 1) {
                return 0;
            }
            else {
                throw new Error("Domain error: Got x = " + x + ", but function is indeterminate" + "" + " for this order");
            }
        }
        //
        // Special case for large x: use asymptotic expansion:
        //
        if (BesselJYDerivativesAsym.asymptotic_bessel_derivative_large_x_limit(v, x)) {
            return BesselJYDerivativesAsym.asymptotic_bessel_j_derivative_large_x_2(v, x);
        }
        //
        // Special case for small x: use Taylor series:
        //
        if ((Math.abs(x) < 5) || (Math.abs(v) > x * x / 4)) {
            var inversed = false;
            if (Math.floor(v) === v && v < 0) {
                v = -v;
                if (Math.trunc(v) & 1) {
                    inversed = true;
                }
            }
            var r = BesselJYDerivativesSeries.bessel_j_derivative_small_z_series(v, x);
            return inversed ? -r : r;
        }
        //
        // Special case for v == 0:
        //
        if (v === 0) {
            return -Bessel.cyl_bessel_j_imp_int(1, x);
        }
        //
        // Default case:
        //
        return BesselDerivativesLinear.bessel_j_derivative_linear(v, x);
    };
    BoostBesselPrime.sph_bessel_j_prime = function (v, x) {
        //
        // Prevent complex result:
        //
        if (x < 0) {
            throw new Error("Domain error: Got x = " + x + ", but function requires x >= 0.");
        }
        //
        // Special case for v == 0:
        //
        if (v === 0) {
            if (x === 0) {
                throw new Error("Overflow error");
            }
            else {
                -Bessel.sph_bessel_j_imp(1, x);
            }
        }
        //
        // Special case for x == 0 and v > 0:
        //
        if (x === 0) {
            throw new Error("Domain error: Got x = " + x + ", but function is indeterminate for " + "" + "this order");
        }
        //
        // Default case:
        //
        return BesselDerivativesLinear.sph_bessel_j_derivative_linear(v, x);
    };
    BoostBesselPrime.cyl_bessel_i_prime = function (v, x) {
        //
        // Prevent complex result:
        //
        if (x < 0 && Math.floor(v) !== v) {
            throw new Error("Domain error: Got x = " + x + ", but function requires x >= 0");
        }
        //
        // Special cases for x == 0:
        //
        if (x === 0) {
            if (v === 1 || v === -1) {
                return 0.5;
            }
            else if (Math.floor(v) === v || v > 1) {
                return 0;
            }
            else {
                throw new Error("Domain error: Got x = " + x + ", but function is indeterminate for" + "" + " this order");
            }
        }
        //
        // Special case for v == 0:
        //
        if (v === 0) {
            return Bessel.cyl_bessel_i_imp(1, x);
        }
        //
        // Default case:
        //
        return BesselDerivativesLinear.bessel_i_derivative_linear(v, x);
    };
    BoostBesselPrime.cyl_bessel_k_prime = function (v, x) {
        //
        // Prevent complex and indeterminate results:
        //
        if (x <= 0) {
            throw new Error("Domain error: Got x = " + x + ", but function requires x > 0");
        }
        //
        // Special case for v == 0:
        //
        if (v === 0) {
            return -Bessel.cyl_bessel_k_imp_int(1, x);
        }
        //
        // Default case:
        //
        return BesselDerivativesLinear.bessel_k_derivative_linear(v, x);
    };
    BoostBesselPrime.cyl_neumann_prime = function (v, x) {
        //
        // Prevent complex and indeterminate results:
        //
        if (x <= 0) {
            throw new Error("Domain error: Got x = " + x + ", but function requires x > 0");
        }
        //
        // Special case for large x: use asymptotic expansion:
        //
        if (BesselJYDerivativesAsym.asymptotic_bessel_derivative_large_x_limit(v, x)) {
            return BesselJYDerivativesAsym.asymptotic_bessel_y_derivative_large_x_2(v, x);
        }
        //
        // Special case for small x: use Taylor series:
        //
        if (v > 0 && Math.floor(v) !== v) {
            if (Math.log(Precision.epsilon() / 2) > v * Math.log((x * x) / (v * 4))) {
                return BesselJYDerivativesSeries.bessel_y_derivative_small_z_series(v, x);
            }
        }
        //
        // Special case for v == 0:
        //
        if (v === 0) {
            return -Bessel.cyl_neumann_imp_int(1, x);
        }
        //
        // Default case:
        //
        return BesselDerivativesLinear.bessel_y_derivative_linear(v, x);
    };
    BoostBesselPrime.sph_neumann_prime = function (v, x) {
        //
        // Prevent complex and indeterminate result:
        //
        if (x <= 0) {
            throw new Error("Domain error: Got x = " + x + ", but function requires x > 0.");
        }
        //
        // Special case for v == 0:
        //
        if (v === 0) {
            return -Bessel.sph_neumann_imp(1, x);
        }
        //
        // Default case:
        //
        return BesselDerivativesLinear.sph_neumann_derivative_linear(v, x);
    };
    return BoostBesselPrime;
}());
exports.BoostBesselPrime = BoostBesselPrime;
