"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * (C) Copyright John Maddock 2007.
 * (C) Copyright Zachary Martin 2016 (port to javascript).
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
var CosPI = /** @class */ (function () {
    function CosPI() {
    }
    CosPI.cos_pi = function (x) {
        // cos of pi*x:
        var invert = false;
        if (Math.abs(x) < 0.25) {
            return Math.cos(Math.PI * x);
        }
        if (x < 0) {
            x = -x;
        }
        var rem = Math.floor(x);
        if (Math.trunc(rem) & 1) {
            invert = !invert;
        }
        rem = x - rem;
        if (rem > 0.5) {
            rem = 1 - rem;
            invert = !invert;
        }
        if (rem === 0.5)
            return 0;
        if (rem > 0.25) {
            rem = 0.5 - rem;
            rem = Math.sin(Math.PI * rem);
        }
        else {
            rem = Math.cos(Math.PI * rem);
        }
        return invert ? -rem : rem;
    };
    return CosPI;
}());
exports.CosPI = CosPI;
