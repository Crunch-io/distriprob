"use strict";

/**
 * (C) Copyright Zachary Martin 2016.
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

const math = require("mathjs");
const jStat = require("jstat").jStat;

function pdfBN(sampleSuccesses,
                      draws,
                      successPop,
                      totalPop) {
  const k = math.bignumber(sampleSuccesses);
  const n = math.bignumber(draws);
  const K = math.bignumber(successPop);
  const N = math.bignumber(totalPop);

  return math.divide(math.multiply(math.combinations(K, k), math.combinations(math.subtract(N, K), math.subtract(n, k))), math.combinations(N, n));
}

function pdf(sampleSuccesses,
                    draws,
                    successPop,
                    totalPop) {
  return math.number(pdfBN(sampleSuccesses, draws, successPop, totalPop));
}

function cdf(sampleSuccesses,
                    draws,
                    successPop,
                    totalPop,
                    lowerTail) {
  let result = math.bignumber(0);

  if (lowerTail) {
    for (let i = Math.max(0, draws + successPop - totalPop); i <= sampleSuccesses; i++) {
      result = math.add(result, pdfBN(i, draws, successPop, totalPop));
    }
  } else {
    for (let i = Math.min(draws, successPop); i > sampleSuccesses; i--) {
      result = math.add(result, pdfBN(i, draws, successPop, totalPop));
    }
  }

  return result;//math.number(result);
}

const sampleSuccesses = 153;
const draws = 835;
const successPop = 256574.0;
const totalPop = 1030167.0;
const lowerTail = true;

//console.log(pdf(sampleSuccesses, draws, successPop, totalPop));
//console.log(cdf(sampleSuccesses, draws, successPop, totalPop, lowerTail).toString());
console.log(jStat.hypgeom.cdf(sampleSuccesses, totalPop, successPop, draws));

