"use strict";

/**
 * (C) Copyright John Maddock 2006.
 * (C) Copyright Zachary Martin 2016 (port to javascript).
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

const Gamma = require("./boostPorts/special_functions/gamma").Gamma;
const IGammaInverse =
  require("./boostPorts/special_functions/detail/igamma_inverse").IGammaInverse;
const Random = require("./random").Random;
const check = require("./errorHandling").check;

import {IRandomState, IRandomIterableIterator} from "./random";

export class GammaDist {

  private static checkParameters(functionName: string,
                                 shape,
                                 scale,
                                 x?,
                                 lowerTail?,
                                 p?,
                                 n?,
                                 seed?):
  {lowerTail?: boolean} {
    const params: {lowerTail?: boolean} = {
      lowerTail: undefined
    };

    check(shape, "shape", `gamma distribution ${functionName}`, "positive_real");
    check(scale, "scale", `gamma distribution ${functionName}`, "positive_real");

    if (typeof x !== "undefined") {
      check(x, "x", `gamma distribution ${functionName}`, "real");
    }

    if (typeof lowerTail !== "undefined" && lowerTail !== null) {
      check(lowerTail, "lowerTail", `gamma distribution ${functionName}`, "boolean");
      params.lowerTail = lowerTail;
    } else {
      params.lowerTail = true;
    }

    if (typeof p !== "undefined") {
      check(p, "p", `gamma distribution ${functionName}`, "probability");
    }

    if (typeof n !== "undefined") {
      check(n, "n", `gamma distribution ${functionName}`, "nonnegative_integer");
    }

    if (typeof seed !== "undefined" && seed !== null) {
      check(seed, "seed", `gamma distribution ${functionName}`, "seed");
    }

    return params;
  }

  public static pdf(x: number, shape: number, scale: number): number {
    // first error checking
    const params = GammaDist.checkParameters("pdf", shape, scale, x);

    if (x <= 0) {
      return 0;
    } else if (x === 0) {
      if (shape < 1) {
        return Number.POSITIVE_INFINITY;
      } else if (shape === 1) {
        return 1/scale;
      } else {
        return 0;
      }
    } else {
      return Gamma.gamma_p_derivative(shape, x/scale)/scale;
    }
  }

  public static cdf(x: number, shape: number, scale: number, lowerTail?: boolean):
  number {
    // first error checking
    const params = GammaDist.checkParameters("cdf", shape, scale, x, lowerTail);

    if (x <= 0) {
      if (params.lowerTail) {
        return 0;
      } else {
        return 1;
      }
    } else {
      let a = x/scale;

      if (params.lowerTail) {
        return Gamma.gamma_p(shape, a);
      } else {
        return Gamma.gamma_q(shape, a);
      }
    }
  }

  public static quantile(p: number, shape: number, scale: number, lowerTail?: boolean):
  number {
    // first error checking
    const params = GammaDist.checkParameters(
      "quantile",
      shape,
      scale,
      undefined,
      lowerTail,
      p
    );

    if (p === 0) {
      if (params.lowerTail) {
        return 0;
      } else {
        return Number.POSITIVE_INFINITY;
      }
    } else if (p === 1) {
      if (params.lowerTail) {
        return Number.POSITIVE_INFINITY;
      } else {
        return 0;
      }
    } else {
      if (params.lowerTail) {
        return IGammaInverse.gamma_p_inv(shape, p) * scale;
      } else {
        return IGammaInverse.gamma_q_inv(shape, p) * scale;
      }
    }
  }

  public static random(n: number,
                       shape: number,
                       scale: number,
                       seed?: number | string | IRandomState):
  number[] {
    // first error checking
    const params = GammaDist.checkParameters(
      "quantile",
      shape,
      scale,
      undefined,
      undefined,
      undefined,
      n,
      seed
    );

    return Random.numbers(n, GammaDist.quantile, [shape, scale, true], seed);
  }

  public static randomIterator(n: number,
                               shape: number,
                               scale: number,
                               seed?: number | string | IRandomState):
  IRandomIterableIterator {
    if (typeof n === "undefined" || n === null) {
      n = Number.POSITIVE_INFINITY;
    }

    // first error checking
    const params = GammaDist.checkParameters(
      "quantile",
      shape,
      scale,
      undefined,
      undefined,
      undefined,
      n,
      seed
    );

    return Random.numberIterator(n, GammaDist.quantile, [shape, scale, true], seed);
  }

}


// console.log("pdf:",GammaDist.pdf(0.3489, 3, 92.34));
// console.log("cdf:",GammaDist.cdf(0.3489, 3, 92.34));
// console.log("quantile:",GammaDist.quantile(0.3489, 3, 92.34));
// console.log("random:",GammaDist.random(20, 3, 92.34, "seed"));



