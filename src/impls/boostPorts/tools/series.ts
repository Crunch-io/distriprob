"use strict";

/**
 * (C) Copyright John Maddock 2005-2006.
 * (C) Copyright Zachary Martin 2016 (port to javascript).
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */


export class Series {
  public static sum_series(series_iterator: IterableIterator<number>,
                           factor: number,
                           max_terms: number,
                           init_value: number): {sum: number, terms_evaluated: number} {
    let counter = max_terms;
    let result = init_value;
    let next_term = series_iterator.next();

    while(!next_term.done &&
          Math.abs(factor * result) < Math.abs(next_term.value) &&
          counter > 0) {
      result += next_term.value;
      counter--;
      next_term = series_iterator.next();
    }

    return {sum: result, terms_evaluated: max_terms - counter};
  }
}

const functor = {
  x: 1,
  y: 1,
  init: function(x, y) {
    this.x = x;
    this.y = y;
    return this;
  },
  operator: function () {
    this.x = this.x + this.y;
    return this.x;
  }
};


