"use strict";

/**
 * (C) Copyright John Maddock 2006.
 * (C) Copyright Zachary Martin 2016 (port to javascript).
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

export class Rational {

  public static evaluate_polynomial(poly: number[], z: number): number {
    let sum = poly[poly.length - 1];
    for(let i = poly.length - 2; i >= 0; i--){
      sum *= z;
      sum += poly[i];
    }
    return sum;
  }

  public static evaluate_even_polynomial(poly: number[], z: number): number {
    return Rational.evaluate_polynomial(poly, z*z);
  }

  public static evaluate_odd_polynomial(poly: number[], z: number): number {
    return poly[0] + z * Rational.evaluate_polynomial(poly.slice(1), z*z);
  }

  public static evaluate_rational(num: number[], denom: number[], z: number): number {

    if (num.length !== denom.length) {
      throw new Error(`num and denom must be of equal length`);
    }

    let s1, s2;
    const size = num.length;

    if (z <= 1) {
      s1 = num[size - 1];
      s2 = denom[size - 1];

      for (let i=size-2; i>=0; i--){
        s1 *= z;
        s2 *= z;
        s1 += num[i];
        s2 += denom[i];
      }
    } else {
      z = 1/z;
      s1 = num[0];
      s2 = denom[0];

      for (let i=1; i<size; i++){
        s1 *= z;
        s2 *= z;
        s1 += num[i];
        s2 += denom[i];
      }
    }

    return s1/s2;
  }
}

