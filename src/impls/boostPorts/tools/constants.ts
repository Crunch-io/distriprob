"use strict";

/**
 * (C) Copyright John Maddock 2005-2006, 2011.
 * (C) Copyright Paul A. Bristow 2006-2011.
 * (C) Copyright Zachary Martin 2016 (port to JavaScript).
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

export class Constants {
  // Math.log(Math.PI)
  public static LNPI(): number {return 1.1447298858494001741;}

  public static LN2(): number {return 6.931471805599453094172e-01;}

  // Math.log(Math.sqrt(2 * Math.PI))
  public static LNSQRTTWOPI(): number {return 0.9189385332046727418;}

  // Math.sqrt(2 * Math.PI)
  public static SQRTTWOPI(): number {return 2.5066282746310005024;}

  // Euler-Mascheroni constant
  public static EULMASC(): number {return 0.5772156649015328606;}

  // Math.sqrt(Math.PI)
  public static SQRTPI(): number {return 1.7724538509055160272;}

  // Math.sqrt(2)
  public static SQRT2(): number {return 1.4142135623730950488;}

  // Math.sqrt(3)
  public static SQRT3(): number {return 1.7320508075688772935e+00;}

  // Math.PI/2
  public static HALFPI(): number {return 1.5707963267948966192;}

  // 1 / Math.sqrt(2)
  public static ONEDIVROOTTWO(): number {return 7.0710678118654752e-01;}

  // 1 / Math.sqrt(2 * Math.PI)
  public static ONEDIVROOTTWOPI(): number {return 3.989422804014326779e-01;}

  // 1 / Math.sqrt(2 * Math.PI)
  public static ONEDIVTWOPI(): number {return 1.59154943091895336e-01;}

  // 2 * Math.PI
  public static TWOPI(): number {return 6.28318530717958647692528676655e+00;}

  // 2 / Math.PI
  public static TWODIVPI(): number {return 6.3661977236758134307553505349005e-01;}

  // (Math.sqrt(2 / Math.PI)
  public static SQRTTWODIVPI(): number {return 7.97884560802865355879892119868e-01;}

  // Math.log(Math.sqrt(2*Math.PI))
  public static LOGROOT2PI(): number {return 9.18938533204672741780329736405e-01;}

  // 1 / Math.sqrt(Math.PI)
  public static ONEDIVSQRTPI(): number {return 5.641895835477562869480e-01;}
}