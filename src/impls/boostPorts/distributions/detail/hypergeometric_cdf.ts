"use strict";

/**
 * (C) Copyright John Maddock 2008.
 * (C) Copyright Zachary Martin 2016 (port to javascript).
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

const HypergeometricPDF = require("./hypergeometric_pdf").HypergeometricPDF;
const Precision = require("../../tools/precision").Precision;

import {Cache} from "../../../cache";

export class HypergeometricCDF {
  public static imp(x: number,
                    r: number,
                    n: number,
                    N: number,
                    invert: boolean,
                    cache: Cache):
  number {
    let result = 0;
    const mode = Math.floor((r + 1) * (n + 1) / (N + 2));
    if(x < mode) {
      result = HypergeometricPDF.imp(x, r, n, N, cache);
      let diff = result;
      const lower_limit = Math.max(0, Math.trunc(n + r) - Math.trunc(N));
      while(diff > (invert ? 1 : result) * Precision.epsilon()) {
        diff = x * ((N + x) - n - r) * diff / ((1 + n - x) * (1 + r - x));
        result += diff;

        if(x === lower_limit) {
          break;
        }
        x--;
      }
    } else {
      invert = !invert;
      const upper_limit = Math.min(r, n);
      if(x !== upper_limit) {
        x++;
        result = HypergeometricPDF.imp(x, r, n, N, cache);
        let diff = result;
        while((x <= upper_limit) && (diff > (invert ? 1 : result) * Precision.epsilon())){
          diff = (n - x) * (r - x) * diff / ((x + 1) * ((N + x + 1) - n - r));
          result += diff;
          x++;
        }
      }
    }

    if(invert) {
      result = 1 - result;
    }

    return result;
  }
}
