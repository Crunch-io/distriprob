"use strict";

/**
 * (C) Copyright Xiaogang Zhang 2006.
 * (C) Copyright Zachary Martin 2016 (port to javascript).
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

const Rational = require("../../tools/rational").Rational;


export class BesselK0 {

  public static bessel_k0(x: number): number {
    const P1: number[] = [
      2.4708152720399552679e+03,
      5.9169059852270512312e+03,
      4.6850901201934832188e+02,
      1.1999463724910714109e+01,
      1.3166052564989571850e-01,
      5.8599221412826100000e-04
    ];
    const Q1: number[] = [
      2.1312714303849120380e+04,
      -2.4994418972832303646e+02,
      1.0
    ];
    const P2: number[] = [
      -1.6128136304458193998e+06,
      -3.7333769444840079748e+05,
      -1.7984434409411765813e+04,
      -2.9501657892958843865e+02,
      -1.6414452837299064100e+00
    ];
    const Q2: number[] = [
      -1.6128136304458193998e+06,
      2.9865713163054025489e+04,
      -2.5064972445877992730e+02,
      1.0
    ];
    const P3: number[] = [
      1.1600249425076035558e+02,
    2.3444738764199315021e+03,
      1.8321525870183537725e+04,
      7.1557062783764037541e+04,
      1.5097646353289914539e+05,
      1.7398867902565686251e+05,
      1.0577068948034021957e+05,
      3.1075408980684392399e+04,
      3.6832589957340267940e+03,
      1.1394980557384778174e+02
    ];
    const Q3: number[] = [
      9.2556599177304839811e+01,
      1.8821890840982713696e+03,
      1.4847228371802360957e+04,
      5.8824616785857027752e+04,
      1.2689839587977598727e+05,
      1.5144644673520157801e+05,
      9.7418829762268075784e+04,
      3.1474655750295278825e+04,
      4.4329628889746408858e+03,
      2.0013443064949242491e+02,
      1.0
    ];
    let value, factor, r, r1, r2;

    if (x < 0) {
      throw new Error(`Domain error: Got x = ${x}, but argument x must be${""
      } non-negative, complex number result not supported`);
    }

    if (x === 0) {
      throw new Error("Overflow error");
    }

    if (x <= 1) {                         // x in (0, 1]
      const y = x * x;
      r1 = Rational.evaluate_polynomial(P1, y) /
        Rational.evaluate_polynomial(Q1, y);
      r2 = Rational.evaluate_polynomial(P2, y) /
        Rational.evaluate_polynomial(Q2, y);
      factor = Math.log(x);
      value = r1 - factor * r2;
    } else {                               // x in (1, \infty)
      const y = 1 / x;
      r = Rational.evaluate_polynomial(P3, y) /
        Rational.evaluate_polynomial(Q3, y);
      factor = Math.exp(-x) / Math.sqrt(x);
      value = factor * r;
    }

    return value;
  }

}

