"use strict";

/**
 * (C) Copyright Xiaogang Zhang 2006.
 * (C) Copyright Zachary Martin 2016 (port to javascript).
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

const Rational = require("../../tools/rational").Rational;
const BesselJ0 = require("./bessel_j0").BesselJ0;
const Constants = require("../../tools/constants").Constants;


export class BesselY0 {

  public static bessel_y0(x: number): number {
    const P1: number[] = [
      1.0723538782003176831e+11,
      -8.3716255451260504098e+09,
      2.0422274357376619816e+08,
      -2.1287548474401797963e+06,
      1.0102532948020907590e+04,
      -1.8402381979244993524e+01,
    ];
    const Q1: number[] = [
      5.8873865738997033405e+11,
      8.1617187777290363573e+09,
      5.5662956624278251596e+07,
      2.3889393209447253406e+05,
      6.6475986689240190091e+02,
      1.0,
    ];
    const P2: number[] = [
      -2.2213976967566192242e+13,
      -5.5107435206722644429e+11,
      4.3600098638603061642e+10,
      -6.9590439394619619534e+08,
      4.6905288611678631510e+06,
      -1.4566865832663635920e+04,
      1.7427031242901594547e+01,
    ];
    const Q2: number[] = [
      4.3386146580707264428e+14,
      5.4266824419412347550e+12,
      3.4015103849971240096e+10,
      1.3960202770986831075e+08,
      4.0669982352539552018e+05,
      8.3030857612070288823e+02,
      1.0,
    ];
    const P3: number[] = [
      -8.0728726905150210443e+15,
      6.7016641869173237784e+14,
      -1.2829912364088687306e+11,
      -1.9363051266772083678e+11,
      2.1958827170518100757e+09,
      -1.0085539923498211426e+07,
      2.1363534169313901632e+04,
      -1.7439661319197499338e+01,
    ];
    const Q3: number[] = [
      3.4563724628846457519e+17,
      3.9272425569640309819e+15,
      2.2598377924042897629e+13,
      8.6926121104209825246e+10,
      2.4727219475672302327e+08,
      5.3924739209768057030e+05,
      8.7903362168128450017e+02,
      1.0,
    ];
    const PC: number[] = [
      2.2779090197304684302e+04,
      4.1345386639580765797e+04,
      2.1170523380864944322e+04,
      3.4806486443249270347e+03,
      1.5376201909008354296e+02,
      8.8961548424210455236e-01,
    ];
    const QC: number[] = [
      2.2779090197304684318e+04,
      4.1370412495510416640e+04,
      2.1215350561880115730e+04,
      3.5028735138235608207e+03,
      1.5711159858080893649e+02,
      1.0,
    ];
    const PS: number[] = [
      -8.9226600200800094098e+01,
      -1.8591953644342993800e+02,
      -1.1183429920482737611e+02,
      -2.2300261666214198472e+01,
      -1.2441026745835638459e+00,
      -8.8033303048680751817e-03,
    ];
    const QS: number[] = [
      5.7105024128512061905e+03,
      1.1951131543434613647e+04,
      7.2642780169211018836e+03,
      1.4887231232283756582e+03,
      9.0593769594993125859e+01,
      1.0,
    ];
    const x1  =  8.9357696627916752158e-01;
    const x2  =  3.9576784193148578684e+00;
    const x3  =  7.0860510603017726976e+00;
    const x11 =  2.280e+02;
    const x12 =  2.9519662791675215849e-03;
    const x21 =  1.0130e+03;
    const x22 =  6.4716931485786837568e-04;
    const x31 =  1.8140e+03;
    const x32 =  1.1356030177269762362e-04;

    let value, factor, r, rc, rs;

    if (x < 0) {
      throw new Error(`Domain error: Got x = ${x} but x must be non-negative,${""
      } complex result not supported.`);
    }

    if (x === 0) {
      throw new Error(`Overflow error`);
    }

    if (x <= 3) {                       // x in (0, 3]
      const y = x * x;
      const z = 2 * Math.log(x/x1) * BesselJ0.bessel_j0(x) / Math.PI;
      r = Rational.evaluate_rational(P1, Q1, y);
      factor = (x + x1) * ((x - x11/256) - x12);
      value = z + factor * r;
    }
    else if (x <= 5.5) {                  // x in (3, 5.5]
      const y = x * x;
      const z = 2 * Math.log(x/x2) * BesselJ0.bessel_j0(x) / Math.PI;
      r = Rational.evaluate_rational(P2, Q2, y);
      factor = (x + x2) * ((x - x21/256) - x22);
      value = z + factor * r;
    } else if (x <= 8) {                 // x in (5.5, 8]
      const y = x * x;
      const z = 2 * Math.log(x/x3) * BesselJ0.bessel_j0(x) / Math.PI;
      r = Rational.evaluate_rational(P3, Q3, y);
      factor = (x + x3) * ((x - x31/256) - x32);
      value = z + factor * r;
    } else {                               // x in (8, \infty)
      const y = 8 / x;
      const y2 = y * y;
      rc = Rational.evaluate_rational(PC, QC, y2);
      rs = Rational.evaluate_rational(PS, QS, y2);
      factor = Constants.ONEDIVSQRTPI() / Math.sqrt(x);
      //
      // The following code is really just:
      //
      // T z = x - 0.25f * pi<T>();
      // value = factor * (rc * sin(z) + y * rs * cos(z));
      //
      // But using the sin/cos addition formulae and constant values for
      // sin/cos of PI/4 which then cancel part of the "factor" term as they're all
      // 1 / sqrt(2):
      //
      const sx = Math.sin(x);
      const cx = Math.cos(x);
      value = factor * (rc * (sx - cx) + y * rs * (cx + sx));
    }

    return value;
  }

}

