"use strict";

/**
 * (C) Copyright John Maddock 2005-2006.
 * (C) Copyright Zachary Martin 2016 (port to javascript).
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

const Precision = require("../tools/precision").Precision;
const Rational = require("../tools/rational").Rational;
const Series = require("../tools/series").Series;


export class Log1p {

  /**
   * Functor log1p_series returns the next term in the Taylor series
   *   pow(-1, k-1)*pow(x, k) / k
   * each time that operator() is invoked.
   */
  private static *log1p_series(x: number): IterableIterator<number> {
    let k = 0;
    let m_mult = -x;
    let m_prod = -1;

    while(true){
      m_prod *= m_mult;
      yield m_prod / ++k;
    }
  }

  public static log1p(x) {
    if(x < -1){
      throw new Error(`log1p(x) requires x > -1, but got x = ${x}.`);
    }
    if(x === -1) {
      throw new Error(`Overflow error`);
    }

    let a = Math.abs(x);
    if(a > 0.5) {
      return Math.log(1 + x);
    }

    // Note that without numeric_limits specialisation support,
    // epsilon just returns zero, and our "optimisation" will always fail:
    if(a < Precision.epsilon()) {
      return x;
    }

    // Maximum Deviation Found:                     1.846e-017
    // Expected Error Term:                         1.843e-017
    // Maximum Relative Change in Control Points:   8.138e-004
    // Max Error found at double precision =        3.250766e-016
    const P = [
      0.15141069795941984e-16,
      0.35495104378055055e-15,
      0.33333333333332835,
      0.99249063543365859,
      1.1143969784156509,
      0.58052937949269651,
      0.13703234928513215,
      0.011294864812099712
    ];
    const Q = [
      1,
      3.7274719063011499,
      5.5387948649720334,
      4.159201143419005,
      1.6423855110312755,
      0.31706251443180914,
      0.022665554431410243,
      -0.29252538135177773e-5
    ];


    let result = 1 - x / 2 + Rational.evaluate_polynomial(P, x) /
      Rational.evaluate_polynomial(Q, x);
    result *= x;

    return result;
  }

  /**
   * compute log(1+x)-x;
   */
  public static log1pmx(x){
    if (x < -1) {
      throw new Error(`Domain error: log1pmx(x) requires x > -1, but got x = ${x}.`);
    }

    if (x === -1) {
      throw new Error(`Overflow error`);
    }

    const a = Math.abs(x);

    if (a > 0.95) {
      return Math.log(1+x)-x;
    }

    // Note that without numeric_limits specialisation support,
    // epsilon just returns zero, and our "optimisation" will always fail:
    if (a < Precision.epsilon()) {
      return -x *x/2;
    }

    const s = Log1p.log1p_series(x);
    s.next();
    const max_iter = 500;

    const result = Series.sum_series(s, Precision.epsilon(), max_iter, 0);

    // return Log1p.log1p(x) - x;
    return result.sum;
  }

}
