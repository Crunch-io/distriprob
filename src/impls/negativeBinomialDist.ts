"use strict";

/**
 * (C) Copyright Paul A. Bristow 2007.
 * (C) Copyright John Maddock 2007.
 * (C) Copyright Zachary Martin 2016 (port to JavaScript).
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

const Beta = require("./boostPorts/special_functions/beta").Beta;
const Powm1 = require("./boostPorts/special_functions/powm1").Powm1;
const IBetaInvAB =
  require("./boostPorts/special_functions/detail/ibeta_inv_ab").IBetaInvAB;
const InvDiscreteQuantile =
  require("./boostPorts/distributions/detail/inv_discrete_quantile").InvDiscreteQuantile;
const Precision = require("./boostPorts/tools/precision").Precision;
const check = require("./errorHandling").check;
const Random = require("./random").Random;

import {IRandomState, IRandomIterableIterator} from "./random";


export class NegativeBinomialDist {

  private static checkParameters(functionName: string,
                                 numSuccesses,
                                 probSuccess,
                                 numFailures?,
                                 lowerTail?,
                                 p?,
                                 n?,
                                 seed?):
  {lowerTail?: boolean} {
    const params: {lowerTail?: boolean} = {
      lowerTail: undefined
    };

    check(
      numSuccesses,
      "number of successes",
      `negative binomial distribution ${functionName}`,
      "positive_real"
    );

    check(
      probSuccess,
      "probability of success",
      `negative binomial distribution ${functionName}`,
      "probability"
    );

    if (typeof numFailures !== "undefined") {
      check(
        numFailures,
        "number of failures",
        `negative binomial distribution ${functionName}`,
        "nonnegative_real"
      );
    }

    if (typeof lowerTail !== "undefined" && lowerTail !== null) {
      check(
        lowerTail,
        "lowerTail",
        `negative binomial distribution ${functionName}`,
        "boolean"
      );
      params.lowerTail = lowerTail;
    } else {
      params.lowerTail = true;
    }

    if (typeof p !== "undefined") {
      check(p, "p", `negative binomial distribution ${functionName}`, "probability");
    }

    if (typeof n !== "undefined") {
      check(
        n,
        "n",
        `negative binomial distribution ${functionName}`,
        "nonnegative_integer"
      );
    }

    if (typeof seed !== "undefined" && seed !== null) {
      check(seed, "seed", `negative binomial distribution ${functionName}`, "seed");
    }

    return params;
  }

  public static pdf(numFailures: number, numSuccesses: number, probSuccess: number):
  number {
    const params = NegativeBinomialDist.checkParameters(
      "pdf",
      numSuccesses,
      probSuccess,
      numFailures
    );

    return (probSuccess/(numFailures + numSuccesses)) *
      Beta.ibeta_derivative(numSuccesses, numFailures + 1, probSuccess);
  }

  public static cdf(numFailures: number,
                    numSuccesses: number,
                    probSuccess: number,
                    lowerTail?: boolean):
  number {
    const params = NegativeBinomialDist.checkParameters(
      "cdf",
      numSuccesses,
      probSuccess,
      numFailures,
      lowerTail
    );

    if (params.lowerTail) {
      return Beta.ibeta(numSuccesses, numFailures + 1, probSuccess);
    } else {
      return Beta.ibetac(numSuccesses, numFailures + 1, probSuccess);
    }
  }

  public static quantile(p: number,
                         numSuccesses: number,
                         probSuccess: number,
                         lowerTail?: boolean):
  number {
    const params = NegativeBinomialDist.checkParameters(
      "quantile",
      numSuccesses,
      probSuccess,
      undefined,
      lowerTail,
      p
    );

    function simplifiedPDF(numFailures: number): number {
      return NegativeBinomialDist.pdf(numFailures, numSuccesses, probSuccess);
    }

    function simplifiedCDF(numFailures: number, lt: boolean): number {
      return NegativeBinomialDist.cdf(numFailures, numSuccesses, probSuccess, lt);
    }

    if (p === 0) {
      return params.lowerTail ? 0 : Number.POSITIVE_INFINITY ;
    } else if (p === 1) {
      return params.lowerTail ? Number.POSITIVE_INFINITY : 0 ;
    } else if (params.lowerTail && p <= Math.pow(probSuccess, numSuccesses)) {
      return 0;
    } else if (!params.lowerTail && -p <= Powm1.powm1(probSuccess, numSuccesses)) {
      return 0;
    } else if (probSuccess === 0) {
      return Number.POSITIVE_INFINITY;
    } else {
      let guess = 0;
      let factor = 5;
      let r = numSuccesses;

      if(r * r * r * (params.lowerTail ? p : 1-p) * probSuccess > 0.005) {
        guess = IBetaInvAB.inverse_negative_binomial_cornish_fisher(
          r,
          probSuccess,
          1-probSuccess,
          params.lowerTail ? p : 1-p,
          params.lowerTail ? 1-p : p
        );
      }

      if(guess < 10) {
        //
        // Cornish-Fisher Negative binomial approximation not accurate in this area:
        //
        guess = Math.min(r * 2, 10);
      } else {
        if (params.lowerTail) {
          factor = (1-p < Math.sqrt(Precision.epsilon())) ? 2 : (guess < 20 ? 1.2 : 1.1);
        } else {
          factor = (p < Math.sqrt(Precision.epsilon())) ? 2 : (guess < 20 ? 1.2 : 1.1);
        }
      }


      const max_iter = 500;

      return InvDiscreteQuantile.inverse_discrete_quantile(
        simplifiedPDF,
        simplifiedCDF,
        p,
        !params.lowerTail,
        guess,
        factor,
        1,
        "up",
        max_iter,
        Number.POSITIVE_INFINITY,
        0
      );
    }
  }

  public static random(n: number,
                       numSuccesses: number,
                       probSuccess: number,
                       seed?: number | string | IRandomState):
  number[] {
    const params = NegativeBinomialDist.checkParameters(
      "random",
      numSuccesses,
      probSuccess,
      undefined,
      undefined,
      undefined,
      n,
      seed
    );

    return Random.numbers(
      n,
      NegativeBinomialDist.quantile,
      [numSuccesses, probSuccess, true],
      seed
    );
  }

  public static randomIterator(n: number,
                               numSuccesses: number,
                               probSuccess: number,
                               seed?: number | string | IRandomState):
  IRandomIterableIterator {
    if (typeof n === "undefined" || n === null) {
      n = Number.POSITIVE_INFINITY;
    }

    const params = NegativeBinomialDist.checkParameters(
      "randomIterator",
      numSuccesses,
      probSuccess,
      undefined,
      undefined,
      undefined,
      n,
      seed
    );

    return Random.numberIterator(
      n,
      NegativeBinomialDist.quantile,
      [numSuccesses, probSuccess, true],
      seed
    );
  }
}

// console.log("pdf:", NegativeBinomialDist.pdf(3, 9, 0.4839));
// console.log("cdf:", NegativeBinomialDist.cdf(3, 9, 0.4839));
// console.log("quantile:", NegativeBinomialDist.quantile(0.337, 9, 0.4839, false));
// console.log("random:", NegativeBinomialDist.random(20, 9, 0.4839));
