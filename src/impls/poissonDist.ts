"use strict";

/**
 * (C) Copyright John Maddock 2006.
 * (C) Copyright Paul A. Bristow 2007.
 * (C) Copyright Zachary Martin 2016 (port to JavaScript).
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

const Gamma = require("./boostPorts/special_functions/gamma").Gamma;
const Expm1 = require("./boostPorts/special_functions/expm1").Expm1;
const GammaInvA = require("./boostPorts/special_functions/detail/gamma_inva").GammaInvA;
const InvDiscreteQuantile =
  require("./boostPorts/distributions/detail/inv_discrete_quantile").InvDiscreteQuantile;
const Random = require("./random").Random;
const check = require("./errorHandling").check;

import {IRandomState, IRandomIterableIterator} from "./random";

export class PoissonDist {

  private static checkParameters(functionName: string,
                                 lambda,
                                 k?,
                                 lowerTail?,
                                 p?,
                                 n?,
                                 seed?):
  {lowerTail?: boolean} {
    const params: {lowerTail?: boolean} = {
      lowerTail: undefined
    };

    check(
      lambda,
      "lambda",
      `poisson distribution ${functionName}`,
      "nonnegative_real"
    );

    if (typeof k !== "undefined") {
      check(k, "k", `poisson distribution ${functionName}`, "real");
    }

    if (typeof lowerTail !== "undefined" && lowerTail !== null) {
      check(
        lowerTail,
        "lowerTail",
        `poisson distribution ${functionName}`,
        "boolean"
      );
      params.lowerTail = lowerTail;
    } else {
      params.lowerTail = true;
    }

    if (typeof p !== "undefined") {
      check(p, "p", `poisson distribution ${functionName}`, "probability");
    }

    if (typeof n !== "undefined") {
      check(n, "n", `poisson distribution ${functionName}`, "nonnegative_integer");
    }

    if (typeof seed !== "undefined" && seed !== null) {
      check(seed, "seed", `poisson distribution ${functionName}`, "seed");
    }

    return params;
  }

  public static pdf(k: number, lambda: number): number {
    const params = PoissonDist.checkParameters("pdf", lambda, k);

    if (lambda === 0 || k < 0 || k === Number.POSITIVE_INFINITY) {
      return 0;
    } else if (k === 0) {
      return Math.exp(-lambda);
    } else {
      return Gamma.gamma_p_derivative(k+1, lambda);
    }
  }

  public static cdf(k: number, lambda: number, lowerTail?: boolean): number {
    const params = PoissonDist.checkParameters("cdf", lambda, k, lowerTail);

    if (lambda === 0) {
      return params.lowerTail ? 0 : 1;
    } else if (k < 0) {
      return params.lowerTail ? 0 : 1;
    } else if (k === 0) {
      return params.lowerTail ? Math.exp(-lambda) : -Expm1.expm1(-lambda);
    } else {
      return params.lowerTail ? Gamma.gamma_q(k+1, lambda) : Gamma.gamma_p(k+1, lambda);
    }
  }

  public static quantile(p: number, lambda: number, lowerTail?: boolean): number {
    const params = PoissonDist.checkParameters(
      "quantile",
      lambda,
      undefined,
      lowerTail,
      p
    );

    function simplifiedPDF(val: number): number {
      return PoissonDist.pdf(val, lambda);
    }

    function simplifiedCDF(val: number, lt: boolean): number {
      return PoissonDist.cdf(val, lambda, lt);
    }

    if (lambda === 0) {
      return 0; // if mean = 0 then p = 0, so k can be anything? return 0 as R does
    } else if (p === 0) {
      return params.lowerTail ? 0 : Number.POSITIVE_INFINITY;
    } else if (p === 1) {
      return params.lowerTail ? Number.POSITIVE_INFINITY : 0;
    } else {
      const max_iter = 500;

      let guess;
      let factor = 8;

      if(lambda < 1) {
        guess = lambda;
      } else {
        guess = GammaInvA.inverse_poisson_cornish_fisher(
          lambda,
          params.lowerTail? p : 1-p,
          params.lowerTail? 1-p: p);
      }

      if(lambda > 5) {
        if(lambda > 1000) {
          factor = 1.01;
        } else if(lambda > 50) {
          factor = 1.1;
        } else if(guess > 10) {
          factor = 1.25;
        } else {
          factor = 2;
        }
        if(guess < 1.1) {
          factor = 8;
        }
      }

      return InvDiscreteQuantile.inverse_discrete_quantile(
        simplifiedPDF,
        simplifiedCDF,
        p,
        !params.lowerTail,
        guess,
        factor,
        1,
        "up",
        max_iter,
        Number.POSITIVE_INFINITY,
        0);
    }
  }

  public static random(n, lambda, seed?: number | string | IRandomState): number[] {
    const params = PoissonDist.checkParameters(
      "random",
      lambda,
      undefined,
      undefined,
      undefined,
      n,
      seed
    );

    return Random.numbers(n, PoissonDist.quantile, [lambda, true], seed);
  }

  public static randomIterator(n, lambda, seed?: number | string | IRandomState):
  IRandomIterableIterator {
    if (typeof n === "undefined" || n === null) {
      n = Number.POSITIVE_INFINITY;
    }

    const params = PoissonDist.checkParameters(
      "randomIterator",
      lambda,
      undefined,
      undefined,
      undefined,
      n,
      seed
    );

    return Random.numberIterator(n, PoissonDist.quantile, [lambda, true], seed);
  }

} // end of class PoissonDist

// console.log("pdf:", PoissonDist.pdf(3, 1.9539));
// console.log("cdf:", PoissonDist.cdf(3, 1.9539, false));
// console.log("quantile:", PoissonDist.quantile(0.7, 1.9539, false));
// console.log("random:", PoissonDist.random(20, 1.9539, "plant a seed"));

