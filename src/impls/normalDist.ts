"use strict";

/**
 * (C) Copyright John Maddock 2006, 2007.
 * (C) Copyright Paul A. Bristow 2006, 2007.
 * (C) Copyright Zachary Martin 2016 (port to JavaScript).
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

const Random = require("./random").Random;
const Constants = require("./boostPorts/tools/constants").Constants;
const Erf = require("./boostPorts/special_functions/erf").Erf;
const ErfInv = require("./boostPorts/special_functions/detail/erf_inv").ErfInv;
const check = require("./errorHandling").check;

import {IRandomState, IRandomIterableIterator} from "./random";

export class NormalDist {
  private static checkParameters(functionName: string,
                                 mu?,
                                 sigma?,
                                 x?,
                                 lowerTail?,
                                 p?,
                                 n?,
                                 seed?):
  {mu: number, sigma: number, lowerTail?: boolean } {
    const params: {mu: number, sigma: number, lowerTail?: boolean } = {
      mu: NaN,
      sigma: NaN,
      lowerTail: undefined
    };

    if (typeof mu !== "undefined" && mu !== null) {
      check(mu, "mu", `normal distribution ${functionName}`, "real");
      params.mu = mu;
    } else {
      params.mu = 0;
    }

    if (typeof sigma !== "undefined" && sigma !== null) {
      check(sigma, "sigma", `normal distribution ${functionName}`, "positive-real");
      params.sigma = sigma;
    } else {
      params.sigma = 1;
    }

    if (typeof x !== "undefined") {
      check(x, "x", `beta distribution ${functionName}`, "real");
    }

    if (typeof lowerTail !== "undefined" && lowerTail !== null) {
      check(lowerTail, "lowerTail", `beta distribution ${functionName}`, "boolean");
      params.lowerTail = lowerTail;
    } else {
      params.lowerTail = true;
    }

    if (typeof p !== "undefined") {
      check(p, "p", `beta distribution ${functionName}`, "probability");
    }

    if (typeof n !== "undefined") {
      check(n, "n", `beta distribution ${functionName}`, "nonnegative_integer");
    }

    if (typeof seed !== "undefined" && seed !== null) {
      check(seed, "seed", `beta distribution ${functionName}`, "number/string");
    }

    return params;
  }

  public static pdf(x: number, mu?: number, sigma?: number): number {
    const params = NormalDist.checkParameters("pdf", mu, sigma, x);

    if(x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY){
      return 0; // pdf + and - infinity is zero.
    }

    let result;
    let exponent = x - params.mu;
    exponent *= -exponent;
    exponent /= 2 * params.sigma * params.sigma;

    result = Math.exp(exponent);
    result /= params.sigma * Math.sqrt(2 * Math.PI);

    return result;
  }

  public static cdf(x: number, mu?: number, sigma?: number, lowerTail?: boolean):
  number {
    const params = NormalDist.checkParameters("cdf", mu, sigma, x, lowerTail);

    if (x === Number.NEGATIVE_INFINITY) {
      if (params.lowerTail) {
        return 0;
      } else {
        return 1;
      }
    }

    if (x === Number.POSITIVE_INFINITY) {
      if (params.lowerTail) {
        return 1;
      } else {
        return 0;
      }
    }

    const diff = (x - params.mu) / (params.sigma * Constants.SQRT2());

    if (params.lowerTail) {
      return Erf.erfc(-diff) / 2;
    } else {
      return Erf.erfc(diff) / 2;
    }
  }

  public static quantile(p: number,
                         mu?: number,
                         sigma?: number,
                         lowerTail?: boolean):
  number {
    const params = NormalDist.checkParameters(
      "quantile",
      mu,
      sigma,
      undefined,
      lowerTail,
      p
    );

    if (p === 0) {
      if (params.lowerTail) {
        return Number.NEGATIVE_INFINITY;
      } else {
        return Number.POSITIVE_INFINITY;
      }
    } else if (p === 1) {
      if (params.lowerTail) {
        return Number.POSITIVE_INFINITY;
      } else {
        return Number.NEGATIVE_INFINITY;
      }
    } else {

      let result = ErfInv.erfc_inv(2 * p);
      if (params.lowerTail) {
        result = -result;
      }
      result *= params.sigma * Constants.SQRT2();
      result += params.mu;
      return result;
    }
  }

  public static random(n, mu?, sigma?, seed?: number | string) {
    const params = NormalDist.checkParameters(
      "random",
      mu,
      sigma,
      undefined,
      undefined,
      undefined,
      n,
      seed
    );

    return Random.numbers(n, NormalDist.quantile, [params.mu, params.sigma, true], seed);
  }

  public static randomIterator(n?: number,
                               mu?: number,
                               sigma?: number,
                               seed?: number | string | IRandomState):
  IRandomIterableIterator {
    if (typeof n === "undefined" || n === null) {
      n = Number.POSITIVE_INFINITY;
    }

    const params = NormalDist.checkParameters(
      "random",
      mu,
      sigma,
      undefined,
      undefined,
      undefined,
      n,
      seed
    );

    return Random.numberIterator(
      n,
      NormalDist.quantile,
      [params.mu, params.sigma, true],
      seed
    );
  }
}

 // console.log("pdf:", NormalDist.pdf(0.258, 5, 9));
 // console.log("cdf:", NormalDist.cdf(0.258, 5, 9));
 // console.log("quantile:", NormalDist.quantile(0.258, 5, 9, true));
 // console.log("random:", NormalDist.random(4, 5, 9));