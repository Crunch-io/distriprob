"use strict";

/**
 * (C) Copyright Zachary Martin 2016.
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

export class Primes {
  private _primeNumbers: number[];
  private _maxLimit: number;

  constructor(maxLimit: number) {
    this._primeNumbers = Primes.lessThanOrEqualTo(maxLimit);
    this._maxLimit = maxLimit;
  }

  public get maxLimit(): number {
    return this._maxLimit
  }

  public value(n: number): number {
    if (n >= this._primeNumbers.length) {
      throw new Error("Out of bounds error");
    }

    return this._primeNumbers[n];
  }


  public static lessThanOrEqualTo(n): number[] {

    if (n === 0) {
      return [];
    }else if (n === 1) {
      return [1];
    } else {
      const isPrime: boolean[] = (new Array(n-1)).fill(true);
      const sqrtN = Math.sqrt(n);
      let index;
      let jIndex;

      for (let i=2; i<sqrtN; i++) {
        index = i - 2;
        if (isPrime[index]) {
          for (let j=i*i; j<=n; j += i) {
            jIndex = j -2;
            isPrime[jIndex] = false;
          }
        }
      }

      let result: number[] = [];

      for(let i=0; i<isPrime.length; i++){
        if (isPrime[i]){
          result.push(i+2);
        }
      }

      return result;
    }
  }
}

