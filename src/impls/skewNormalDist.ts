"use strict";

/**
 * (C) Copyright Benjamin Sobotta 2012.
 * (C) Copyright Zachary Martin 2016 (port to javascript).
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

const OwensT = require("./boostPorts/special_functions/owens_t").OwensT;
const NormalDist = require("./normalDist").NormalDist;
const ErfInv = require("./boostPorts/special_functions/detail/erf_inv").ErfInv;
const Constants = require("./boostPorts/tools/constants").Constants;
const Roots = require("./boostPorts/tools/roots").Roots;
const Random = require("./random").Random;
const check = require("./errorHandling").check;

import {IRandomIterableIterator, IRandomState} from "./random";

export class SkewNormalDist {

  private static checkParameters(functionName: string,
                                 location,
                                 scale,
                                 shape,
                                 x?,
                                 lowerTail?,
                                 p?,
                                 n?,
                                 seed?):
  {location: number, scale: number, shape: number, lowerTail?: boolean } {
    const params: {location: number, scale: number, shape: number, lowerTail?: boolean } =
    {
      location: NaN,
      scale: NaN,
      shape: NaN,
      lowerTail: undefined
    };

    check(
      location,
      "location",
      `skew normal distribution ${functionName}`,
      "real"
    );

    if (typeof location !== "undefined" && location !== null) {
      check(location, "location", `skew normal distribution ${functionName}`, "real");
      params.location = location;
    } else {
      params.location = 0;
    }

    if (typeof scale !== "undefined" && scale !== null) {
      check(scale, "scale", `skew normal distribution ${functionName}`, "positive-real");
      params.scale = scale;
    } else {
      params.scale = 1;
    }

    if (typeof shape !== "undefined" && shape !== null) {
      check(shape, "shape", `skew normal distribution ${functionName}`, "real");
      params.shape = shape;
    } else {
      params.shape = 0;
    }

    if (typeof x !== "undefined") {
      check(x, "x", `skew normal distribution ${functionName}`, "real");
    }

    if (typeof lowerTail !== "undefined" && lowerTail !== null) {
      check(
        lowerTail,
        "lowerTail",
        `skew normal distribution ${functionName}`,
        "boolean"
      );
      params.lowerTail = lowerTail;
    } else {
      params.lowerTail = true;
    }


    if (typeof p !== "undefined") {
      check(p, "p", `skew normal distribution ${functionName}`, "probability");
    }

    if (typeof n !== "undefined") {
      check(n, "n", `skew normal distribution ${functionName}`, "nonnegative_integer");
    }

    if (typeof seed !== "undefined" && seed !== null) {
      check(seed, "seed", `skew normal distribution ${functionName}`, "seed");
    }

    return params;
  }

  public static pdf(x: number, location?: number, scale?: number, shape?: number):
  number {
    // first error checking
    const params = SkewNormalDist.checkParameters("pdf", location, scale, shape, x);

    if(x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY){
      return 0; // pdf + and - infinity is zero.
    }

    const transformed_x = (x - params.location) / params.scale;

    return NormalDist.pdf(transformed_x) * NormalDist.cdf(params.shape * transformed_x) *
      2 / params.scale;
  }

  public static cdf(x: number,
                    location?: number,
                    scale?: number,
                    shape?: number,
                    lowerTail?: boolean):
  number {
    // first error checking
    const params = SkewNormalDist.checkParameters(
      "cdf",
      location,
      scale,
      shape,
      x,
      lowerTail
    );

    if (x === Number.NEGATIVE_INFINITY) {
      if (params.lowerTail) {
        return 0;
      } else {
        return 1;
      }
    }

    if (x === Number.POSITIVE_INFINITY) {
      if (params.lowerTail) {
        return 1;
      } else {
        return 0;
      }
    }

    const transformed_x = (x - params.location) / params.scale;

    if (params.lowerTail) {
      return NormalDist.cdf(transformed_x) -
        OwensT.owens_t(transformed_x, params.shape) * 2 ;
    } else {
      return NormalDist.cdf(transformed_x, 0, 1, false) +
        OwensT.owens_t(transformed_x, params.shape) * 2;
    }
  }

  private static mean(location: number, scale: number, shape: number): number {
    return location + scale * shape / Math.sqrt(Math.PI + Math.PI * shape * shape) *
      Constants.SQRT2();
  }

  private static variance(scale: number, shape: number): number {
    const delta2 = 1 / (1+1/(shape*shape));

    return scale * scale * (1 - Constants.TWODIVPI() * delta2);
  }

  private static standard_deviation(scale: number, shape: number): number {
    return Math.sqrt(SkewNormalDist.variance(scale, shape));
  }

  private static skewness(shape: number): number {
    const factor = (4 - Math.PI)/2;
    const delta = shape / Math.sqrt(1 + shape * shape);

    return factor * Math.pow(Constants.SQRTTWODIVPI() * delta, 3) /
      Math.pow(1 - Constants.TWODIVPI() * delta * delta, 1.5);
  }

  private static kurtosis_excess(shape: number): number {
    const factor = (Math.PI - 3) * 2;

    const delta2 = 1 / (1 + 1/(shape * shape));

    const x = 1 - Constants.TWODIVPI() * delta2;
    const y = Constants.TWODIVPI() * delta2;

    return factor * y*y / (x*x);
  }

  private static skew_normal_quantile_functor(location: number,
                                              scale: number,
                                              shape: number,
                                              p: number):
  (x: number) => {f0: number, f1: number} {

    return (x: number) => {
      const c = SkewNormalDist.cdf(x, location, scale, shape, true);
      const fx = c - p;
      const dx = SkewNormalDist.pdf(x, location, scale, shape);

      return {f0: fx, f1: dx};
    }
  }

  public static quantile(p: number,
                         location?: number,
                         scale?: number,
                         shape?: number,
                         lowerTail?: boolean):
  number {
    // first error checking
    const params = SkewNormalDist.checkParameters(
      "quantile",
      location,
      scale,
      shape,
      undefined,
      lowerTail,
      p
    );


    if (p === 0) {
      if (params.lowerTail) {
        return Number.NEGATIVE_INFINITY;
      } else {
        return Number.POSITIVE_INFINITY;
      }
    } else if (p === 1) {
      if (params.lowerTail) {
        return Number.POSITIVE_INFINITY;
      } else {
        return Number.NEGATIVE_INFINITY;
      }
    } else {

      if (!params.lowerTail) {
        return SkewNormalDist.quantile(
          p,
          -params.location,
          params.scale,
          -params.shape,
          true
        );
      }

      let result;

      // Compute initial guess via Cornish-Fisher expansion.
      let x = - ErfInv.erfc_inv(2 * p) * Constants.SQRT2();

      // Avoid unnecessary computations if there is no skew.
      if(params.shape !== 0) {
        const skew = SkewNormalDist.skewness(params.shape);
        const exk = SkewNormalDist.kurtosis_excess(params.shape);

        x = x + (x*x-1)*skew/6 + x*(x*x-3)*exk/24 - x*(2*x*x-5)*skew*skew/36;
      }

      result = SkewNormalDist.standard_deviation(params.scale, params.shape) * x +
        SkewNormalDist.mean(params.location, params.scale, params.shape);

      // handle special case of non-skew normal distribution.
      if(params.shape === 0) {
        return result;
      }

      // refine the result by numerically searching the root of (p-cdf)

      const search_min = Number.NEGATIVE_INFINITY;
      const search_max = Number.POSITIVE_INFINITY;

      const get_digits = 53;
      const max_iter = 50;
      const functor = SkewNormalDist.skew_normal_quantile_functor(
        params.location,
        params.scale,
        params.shape,
        p
      );

      result = Roots.newton_raphson_iterate(
        functor,
        result,
        search_min,
        search_max,
        get_digits,
        max_iter
      );

      return result.result;
    }
  }

  public static random(n: number,
                       location?: number,
                       scale?: number,
                       shape?: number,
                       seed?: number | string | IRandomState):
  number[] {
    // first error checking
    const params = SkewNormalDist.checkParameters(
      "random",
      location,
      scale,
      shape,
      undefined,
      undefined,
      undefined,
      n,
      seed
    );

    return Random.numbers(
      n,
      SkewNormalDist.quantile,
      [params.location, params.scale, params.shape, true],
      seed
    );
  }


  public static randomIterator(n: number,
                               location?: number,
                               scale?: number,
                               shape?: number,
                               seed?: number | string | IRandomState):
  IRandomIterableIterator {
    if (typeof n === "undefined" || n === null) {
      n = Number.POSITIVE_INFINITY;
    }

    // first error checking
    const params = SkewNormalDist.checkParameters(
      "random",
      location,
      scale,
      shape,
      undefined,
      undefined,
      undefined,
      n,
      seed
    );

    return Random.numberIterator(
      n,
      SkewNormalDist.quantile,
      [params.location, params.scale, params.shape, true],
      seed
    );
  }

}

// console.log("pdf:", SkewNormalDist.pdf(0.258, 5, 9, 1));
// console.log("cdf:", SkewNormalDist.cdf(0.258, 5, 9, 1));
// console.log("quantile:", SkewNormalDist.quantile(0.258, 5, 9, 1, true));
// console.log("random:", SkewNormalDist.random(20, 5, 9, 1, "seed"));
//
// const it = SkewNormalDist.randomIterator(20, 5, 9, 1, "seed");
//
// for (let r of it) {
//   console.log(r);
// }
