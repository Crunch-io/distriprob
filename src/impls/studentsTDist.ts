"use strict";

/**
 * (C) Copyright John Maddock 2006.
 * (C) Copyright Paul A. Bristow 2006, 2012.
 * (C) Copyright Thomas Mang 2012.
 * (C) Copyright Zachary Martin 2016 (port to javascript).
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

const Random = require("./random").Random;
const InverseStudentsT =
  require("./boostPorts/special_functions/detail/t_distribution_inv").InverseStudentsT;
const NonCentralT = require("./boostPorts/distributions/non_central_t").NonCentralT;
const check = require("./errorHandling").check;

import {IRandomState, IRandomIterableIterator} from "./random";


export class StudentsTDist {

  private static checkParameters(functionName: string,
                                 degreesOfFreedom,
                                 ncp,
                                 x?,
                                 lowerTail?,
                                 p?,
                                 n?,
                                 seed?):
  {ncp: number, lowerTail?: boolean} {
    const params: {ncp: number, lowerTail?: boolean} = {
      ncp: NaN,
      lowerTail: undefined
    };

    check(
      degreesOfFreedom,
      "degrees of freedom",
      `student's t distribution ${functionName}`,
      "positive_real"
    );

    if (typeof ncp !== "undefined" && ncp !== null) {
      check(ncp, "ncp", `student's t distribution ${functionName}`, "real");
      params.ncp = ncp;
    } else {
      params.ncp = 0;
    }

    if (typeof x !== "undefined") {
      check(x, "x", `student's t distribution ${functionName}`, "real");
    }

    if (typeof lowerTail !== "undefined" && lowerTail !== null) {
      check(
        lowerTail,
        "lowerTail",
        `student's t distribution ${functionName}`,
        "boolean"
      );
      params.lowerTail = lowerTail;
    } else {
      params.lowerTail = true;
    }

    if (typeof p !== "undefined") {
      check(p, "p", `student's t distribution ${functionName}`, "probability");
    }

    if (typeof n !== "undefined") {
      check(n, "n", `student's t distribution ${functionName}`, "nonnegative_integer");
    }

    if (typeof seed !== "undefined" && seed !== null) {
      check(seed, "seed", `student's t distribution ${functionName}`, "seed");
    }

    return params;
  }

  public static pdf(x: number, degreesOfFreedom: number, ncp?: number): number {
    // first error checking
    const params = StudentsTDist.checkParameters("pdf", degreesOfFreedom, ncp, x);

    return NonCentralT.non_central_t_pdf(degreesOfFreedom, params.ncp, x);
  }

  public static cdf(x: number,
                    degreesOfFreedom: number,
                    lowerTail?: boolean,
                    ncp?: number):
  number {
    // first error checking
    const params = StudentsTDist.checkParameters(
      "cdf",
      degreesOfFreedom,
      ncp,
      x,
      lowerTail
    );

    return NonCentralT.non_central_t_cdf(
      degreesOfFreedom,
      params.ncp,
      x,
      !params.lowerTail
    );
  }

  public static quantile(p: number,
                         degreesOfFreedom: number,
                         lowerTail?: boolean,
                         ncp?: number):
  number {
    // first error checking
    const params = StudentsTDist.checkParameters(
      "quantile",
      degreesOfFreedom,
      ncp,
      undefined,
      lowerTail,
      p
    );

    if (params.ncp === 0) {
      if (params.lowerTail) {
        return InverseStudentsT.fast_students_t_quantile(degreesOfFreedom, p);
      } else {
        return - StudentsTDist.quantile(p, degreesOfFreedom, true);
      }
    } else {
      if (params.lowerTail) {
        return NonCentralT.non_central_t_quantile(degreesOfFreedom, params.ncp, p, 1 - p);
      } else {
        return NonCentralT.non_central_t_quantile(degreesOfFreedom, params.ncp, 1 - p, p);
      }
    }
  }

  public static random(n: number,
                       degreesOfFreedom: number,
                       ncp: number = 0,
                       seed?: number | string | IRandomState):
  number[] {
    // first error checking
    const params = StudentsTDist.checkParameters(
      "random",
      degreesOfFreedom,
      ncp,
      undefined,
      undefined,
      undefined,
      n,
      seed
    );

    return Random.numbers(
      n,
      StudentsTDist.quantile,
      [degreesOfFreedom, true, params.ncp],
      seed
    );
  }

  public static randomIterator(n: number,
                               degreesOfFreedom: number,
                               ncp?: number,
                               seed?: number | string | IRandomState):
  IRandomIterableIterator {
    if (typeof n === "undefined" || n === null) {
      n = Number.POSITIVE_INFINITY;
    }

    // first error checking
    const params = StudentsTDist.checkParameters(
      "random",
      degreesOfFreedom,
      ncp,
      undefined,
      undefined,
      undefined,
      n,
      seed
    );

    return Random.numberIterator(
      n,
      StudentsTDist.quantile,
      [degreesOfFreedom, true, params.ncp],
      seed
    );
  }

} // end of class StudentsTDist

// console.log("pdf:", StudentsTDist.pdf(0.258,  5, 1));
// console.log("cdf:", StudentsTDist.cdf(0.258, 5,  true, 1));
// console.log("quantile:", StudentsTDist.quantile(0.258, 5, false, 1));
// console.log("random:", StudentsTDist.random(20, 5, 1, "seed"));
//
// const it = StudentsTDist.randomIterator(20, 5, 1, "seed");
//
// for (let r of it) {
//   console.log(r);
// }

