"use strict";

/**
 * (C) Copyright Zachary Martin 2016.
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

import {should} from "chai";
import {readFileSync} from "fs";
import {chi2} from "../../index";
import {digitsOfAgreement} from "../digitCompare";

should();

const DIGIT_AGREE_TOLERANCE = 10;
const generatedTestCases = JSON.parse(readFileSync(__dirname + "/../../../test_cases/chiSquared/generatedCases.json", "utf8"));


describe("chi squared distribution", function() {

  describe("generated cases", function() {
    for (let testCase of generatedTestCases) {
      describe("pdfSync", function() {
        it("should match the R generated probability density for x", function () {
          let doa = digitsOfAgreement(
            testCase["pd"],
            chi2.pdf(testCase["x"], testCase["dof"])
          );

          doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE);
        });
      });

      describe("cdfSync", function () {
        it("should match the R generated lower cumulative density for x", function () {
          let doa = digitsOfAgreement(
            testCase["cdLower"],
            chi2.cdf(testCase["x"], testCase["dof"], true)
          );

          doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE);
        });

        it("should match the R generated upper cumulative density for x", function () {
          let doa = digitsOfAgreement(
            testCase["cdUpper"],
            chi2.cdf(testCase["x"], testCase["dof"], false)
          );

          doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE);
        });
      });

      describe("quantileSync", function(){
        it("should match the R generated lower quantile for the lower CDF", function() {
          let doa = digitsOfAgreement(
            testCase["quantileLLower"],
            chi2.quantile(
              testCase["cdLower"],
              testCase["dof"],
              true
            )
          );



          doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE);
        });

        it("should match the R generated upper quantile for the lower CDF", function() {
          let doa = digitsOfAgreement(
            testCase["quantileLUpper"],
            chi2.quantile(
              testCase["cdLower"],
              testCase["dof"],
              false
            )
          );

          doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE);
        });
      });
    }

  });
});
