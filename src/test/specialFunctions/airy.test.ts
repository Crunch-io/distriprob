"use strict";

/**
 * (C) Copyright Zachary Martin 2016.
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */


import {should} from "chai";
import {airy} from "../../index";
import {digitsOfAgreement} from "../digitCompare";

should();

const DIGIT_AGREE_TOLERANCE = 14;

const testCases:
  Array<{x: number, Ai: number, Bi: number, AiPrime: number, BiPrime: number}> = [
  {
    x: 0,
    Ai: 0.355028053887817239260063186004183176397979174199177240583327,
    Bi: 0.614926627446000735150922369093613553594728188648596505040879,
    AiPrime: -0.258819403792806798405183560189203963479091138354934582210002,
    BiPrime: 0.448288357353826357914823710398828390866226799212262061082809
  },
  {
    x: 2,
    Ai: 0.0349241304232743791353220807918076097610602138975832071886699,
    Bi: 3.29809499997821471028060442522345242200397596340362078768292,
    AiPrime: -0.0530903844336536317039991858787034912485609900458779926304030,
    BiPrime: 4.10068204993288988938203407917793529439024461377513711983771
  },
  {
    x: 3.5,
    Ai: 0.00258409878698963496327714478330027845019631096464789073425468,
    Bi: 33.0555067546114794142573129819217946861266278143724855010951,
    AiPrime: -0.00500441396795258283203024967883836790716278377542974739809987,
    BiPrime: 59.1643195813609870345742121795224602529063343063320217229383
  },
  {
    x: 30.5,
    Ai: 2.04253461666926015963302258449952681287194929082634196439857e-50,
    Bi: 1.41092256201712698413071856671990267572381736486242769613348e48,
    AiPrime: -1.12969466271996376602221721397236452019046628449363103927812e-49,
    BiPrime: 7.78046629440950280615411694840600772185863288897663300007879e48
  },
  {
    x: -2,
    Ai: 0.227407428201685575991924436037873799460772225417096716495790,
    Bi: -0.412302587956398488083234054611461042034534834472404728823877,
    AiPrime: 0.618259020741691041406264291332475282915777945124146942159898,
    BiPrime: 0.278795166921169522685097569410983241403000593451631000239732
  },
  {
    x: -3.5,
    Ai: -0.375533823140431911934396951580170239543268576378264063902563,
    Bi: 0.168939837481058611843442769540943269911562243926304070915824,
    AiPrime: -0.343443433454048146287937374098698857094194220958713294264017,
    BiPrime: -0.693116284907288801752443612670580462699702668014978495343697
  },
  {
    x: -30.25,
    Ai: -0.236900428491559731119806902381433570300271552218956227857722,
    Bi: 0.0418614989839147441219283537268101850442118139150748075124111,
    AiPrime: -0.232197332372689274917364138870840123428255785603863926579897,
    BiPrime: -1.30261375952554697768880873095691151213006925411329957440342
  },
  {
    x: -300.5,
    Ai: -0.117584304761702008955433457721670950077867326839023449546057,
    Bi: 0.0673518035440918806545676478730240310819758211028871823560384,
    AiPrime: -1.16763702262473888724431076711846459336993902544926162874376,
    BiPrime: -2.03826035550300900666977975504950803669545593208969273694133
  },
];

describe("airy functions", function() {

  for (let testCase of testCases) {
    describe("spot tests", function(){
      it("should match high accuracy estimates of function values - Ai", function () {
        let testValue = airy.ai(
          testCase.x,
        );

        console.log(`x: ${testCase.x}, got for Ai: ${testValue}, expected: ${testCase.Ai}`);
        let doa = digitsOfAgreement(testCase.Ai, testValue);
        doa.should.be.at.least(DIGIT_AGREE_TOLERANCE);
      });
    });


  }
});

