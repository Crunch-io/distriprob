"use strict";

/**
 * (C) Copyright Zachary Martin 2016.
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

import {should} from "chai";
import {bessel} from "../../index";
import {digitsOfAgreement} from "../digitCompare";
const testCasesI = require("../../../test_cases/bessel/testCases_i");
const testCasesJ = require("../../../test_cases/bessel/testCases_j");
const testCasesK = require("../../../test_cases/bessel/testCases_k");
const testCasesY = require("../../../test_cases/bessel/testCases_y");
const testCasesSphJ = require("../../../test_cases/bessel/testCases_sph_j");
const testCasesSphY = require("../../../test_cases/bessel/testCases_sph_y");
const testCasesIPrime = require("../../../test_cases/bessel/testCases_i_prime");
const testCasesJPrime = require("../../../test_cases/bessel/testCases_j_prime");
const testCasesKPrime = require("../../../test_cases/bessel/testCases_k_prime");
const testCasesYPrime = require("../../../test_cases/bessel/testCases_y_prime");

should();

const DIGIT_AGREE_TOLERANCE = 13;
const DIGIT_AGREE_TOLERANCE_K = 12;
const DIGIT_AGREE_TOLERANCE_Y = 12;
const DIGIT_AGREE_TOLERANCE_SPH_J = 12;
const DIGIT_AGREE_TOLERANCE_SPH_Y = 12;
const DIGIT_AGREE_TOLERANCE_J_PRIME = 12;
const DIGIT_AGREE_TOLERANCE_Y_PRIME = 11;

describe("bessel functions", function() {
  describe("i", function() {
    describe("accuracy tests", function() {
      describe("boost data set", function() {
        for (let testCase of testCasesI) {
          it("should match high accuracy estimates of function values", function () {
            let testValue = bessel.i(
              testCase["v"],
              testCase["x"]
            );

            // console.log(`v: ${testCase["v"]}, x: ${testCase["x"]}, got: ${testValue}, expected: ${testCase["result"]}`);

            let doa = digitsOfAgreement(testCase["result"], testValue);
            if (testCase["result"] < 1 / Number.MAX_VALUE) {
              doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE - 4);
            } else {
              doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE);
            }
          });
        }
      });
    });
  });

  describe("j", function() {
    describe("accuracy tests", function() {
      describe("boost data set", function() {
        for (let testCase of testCasesJ) {
          it("should match high accuracy estimates of function values", function () {
            let testValue = bessel.j(
              testCase["v"],
              testCase["x"]
            );

            // console.log(`v: ${testCase["v"]}, x: ${testCase["x"]}, got: ${testValue}, expected: ${testCase["result"]}`);

            let doa = digitsOfAgreement(testCase["result"], testValue);
            if (testCase["result"] < 1 / Number.MAX_VALUE) {
              doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE - 4);
            } else {
              doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE);
            }
          });
        }
      });
    });
  });

  describe("k", function() {
    describe("accuracy tests", function() {
      describe("boost data set", function() {
        for (let testCase of testCasesK) {
          it("should match high accuracy estimates of function values", function () {
            let testValue = bessel.k(
              testCase["v"],
              testCase["x"]
            );

            // console.log(`v: ${testCase["v"]}, x: ${testCase["x"]}, got: ${testValue}, expected: ${testCase["result"]}`);

            let doa = digitsOfAgreement(testCase["result"], testValue);
            if (testCase["result"] < 1 / Number.MAX_VALUE) {
              doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_K - 4);
            } else {
              doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_K);
            }
          });
        }
      });
    });
  });


  describe("y", function() {
    describe("accuracy tests", function() {
      describe("boost data set", function() {
        for (let testCase of testCasesY) {
          it("should match high accuracy estimates of function values", function () {
            let testValue = bessel.y(
              testCase["v"],
              testCase["x"]
            );

            // console.log(`v: ${testCase["v"]}, x: ${testCase["x"]}, got: ${testValue}, expected: ${testCase["result"]}`);

            let doa = digitsOfAgreement(testCase["result"], testValue);
            if (testCase["result"] < 1 / Number.MAX_VALUE) {
              doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_Y - 4);
            } else {
              doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_Y);
            }
          });
        }
      });
    });
  });

  describe("spherical j", function() {
    describe("accuracy tests", function() {
      describe("boost data set", function() {
        for (let testCase of testCasesSphJ) {
          it("should match high accuracy estimates of function values", function () {
            let testValue = bessel.sphJ(
              testCase["v"],
              testCase["x"]
            );

            //console.log(`v: ${testCase["v"]}, x: ${testCase["x"]}, got: ${testValue}, expected: ${testCase["result"]}`);

            let doa = digitsOfAgreement(testCase["result"], testValue);
            if (testCase["result"] < 1 / Number.MAX_VALUE) {
              doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_SPH_J - 4);
            } else {
              doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_SPH_J);
            }
          });
        }
      });
    });
  });

  describe("spherical y", function() {
    describe("accuracy tests", function() {
      describe("boost data set", function() {
        for (let testCase of testCasesSphY) {
          it("should match high accuracy estimates of function values", function () {
            let testValue = bessel.sphY(
              testCase["v"],
              testCase["x"]
            );

            // console.log(`v: ${testCase["v"]}, x: ${testCase["x"]}, got: ${testValue}, expected: ${testCase["result"]}`);

            let doa = digitsOfAgreement(testCase["result"], testValue);
            if (testCase["result"] < 1 / Number.MAX_VALUE) {
              doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_SPH_Y - 4);
            } else {
              doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_SPH_Y);
            }
          });
        }
      });
    });
  });

  describe("i prime", function() {
    describe("accuracy tests", function() {
      describe("boost data set", function() {
        for (let testCase of testCasesIPrime) {
          it("should match high accuracy estimates of function values", function () {
            let testValue = bessel.iPrime(
              testCase["v"],
              testCase["x"]
            );

            let doa = digitsOfAgreement(testCase["result"], testValue);
            if (testCase["result"] < 1 / Number.MAX_VALUE) {
              doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE - 4);
            } else {
              doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE);
            }
          });
        }
      });
    });
  });

  describe("j prime", function() {
    describe("accuracy tests", function() {
      describe("boost data set", function() {
        for (let testCase of testCasesJPrime) {
          it("should match high accuracy estimates of function values", function () {
            let testValue = bessel.jPrime(
              testCase["v"],
              testCase["x"]
            );

            // console.log(`v: ${testCase["v"]}, x: ${testCase["x"]}, got: ${testValue}, expected: ${testCase["result"]}`);

            let doa = digitsOfAgreement(testCase["result"], testValue);
            if (testCase["result"] < 1 / Number.MAX_VALUE) {
              doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_J_PRIME - 7);
            } else {
              doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_J_PRIME);
            }
          });
        }
      });
    });
  });

  describe("k prime", function() {
    describe("accuracy tests", function() {
      describe("boost data set", function() {
        for (let testCase of testCasesKPrime) {
          it("should match high accuracy estimates of function values", function () {
            let testValue = bessel.kPrime(
              testCase["v"],
              testCase["x"]
            );

            let doa = digitsOfAgreement(testCase["result"], testValue);
            if (testCase["result"] < 1 / Number.MAX_VALUE) {
              doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE - 4);
            } else {
              doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE);
            }
          });
        }
      });
    });
  });

  describe("y prime", function() {
    describe("accuracy tests", function() {
      describe("boost data set", function() {
        for (let testCase of testCasesYPrime) {
          it("should match high accuracy estimates of function values", function () {
            let testValue = bessel.yPrime(
              testCase["v"],
              testCase["x"]
            );

            let doa = digitsOfAgreement(testCase["result"], testValue);
            if (testCase["result"] < 1 / Number.MAX_VALUE) {
              doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_Y_PRIME - 4);
            } else {
              doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_Y_PRIME);
            }
          });
        }
      });
    });
  });

});

