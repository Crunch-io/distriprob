"use strict";

/**
 * (C) Copyright Zachary Martin 2016.
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

import {should} from "chai";
import {beta} from "../../index";
import {digitsOfAgreement} from "../digitCompare";
const testCasesFunction = require("../../../test_cases/beta/testCases_function");
const testCasesIncomplete = require("../../../test_cases/beta/testCases_incomplete");
const testCasesDerivative = require("../../../test_cases/beta/testCases_derivative");


should();

const DIGIT_AGREE_TOLERANCE = 12;
const DIGIT_AGREE_TOLERANCE_INC_UPPER = 11;
const DIGIT_AGREE_TOLERANCE_INC_INV = 10;
const DIGIT_AGREE_TOLERANCE_INC_INV_PARAM = 11;
const DIGIT_AGREE_TOLERANCE_INC_DERIV = 9;


describe("beta functions", function() {

  describe("function", function() {
    describe("accuracy tests", function() {
      describe("boost data set", function() {
        for (let testCase of testCasesFunction) {
          it("should match high accuracy estimates of function values", function () {
            let testValue = beta.function(
              testCase["a"],
              testCase["b"]
            );

            //console.log(`a: ${testCase["a"]}, b: ${testCase["b"]}, got: ${testValue}, expected: ${testCase["result"]}`);

            let doa = digitsOfAgreement(testCase["result"], testValue);
            doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE);
          });
        }
      });
    });
  });

  describe("incomplete", function() {
    describe("accuracy tests", function() {
      describe("boost data set", function() {
        for (let testCase of testCasesIncomplete) {
          it("should match high accuracy estimates of function values - lower", function () {
            let testValue = beta.incomplete(
              testCase["a"],
              testCase["b"],
              testCase["x"],
              true,
              false
            );

            // console.log(`a: ${testCase["a"]}, b: ${testCase["b"]}, x: ${testCase["x"]}, got: ${testValue}, expected: ${testCase["lower"]}`);

            let doa = digitsOfAgreement(testCase["lower"], testValue);

            if (testCase["lower"] < 1/Number.MAX_VALUE && testCase["lower"] !== 0) {
              doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE + 300 + Math.log10(testCase["lower"]));
            } else {
              doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE);
            }
          });

          it("should match high accuracy estimates of function values - upper", function () {
            let testValue = beta.incomplete(
              testCase["a"],
              testCase["b"],
              testCase["x"],
              false,
              false
            );

            // console.log(`a: ${testCase["a"]}, b: ${testCase["b"]}, x: ${testCase["x"]}, got: ${testValue}, expected: ${testCase["upper"]}`);

            let doa = digitsOfAgreement(testCase["upper"], testValue);

            if (testCase["upper"] < 1/Number.MAX_VALUE && testCase["upper"] !== 0) {
              doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_UPPER + 300 + Math.log10(testCase["upper"]));
            } else {
              doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_UPPER);
            }
          });

          it("should match high accuracy estimates of function values - lowerReg", function () {
            let testValue = beta.incomplete(
              testCase["a"],
              testCase["b"],
              testCase["x"],
              true,
              true
            );

            // console.log(`a: ${testCase["a"]}, b: ${testCase["b"]}, x: ${testCase["x"]}, got: ${testValue}, expected: ${testCase["lowerReg"]}`);

            let doa = digitsOfAgreement(testCase["lowerReg"], testValue);

            if (testCase["lowerReg"] < 1/Number.MAX_VALUE && testCase["lowerReg"] !== 0) {
              doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE + 300 + Math.log10(testCase["lowerReg"]));
            } else {
              doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE);
            }
          });

          it("should match high accuracy estimates of function values - upperReg", function () {
            let testValue = beta.incomplete(
              testCase["a"],
              testCase["b"],
              testCase["x"],
              false,
              true
            );

            // console.log(`a: ${testCase["a"]}, b: ${testCase["b"]}, x: ${testCase["x"]}, got: ${testValue}, expected: ${testCase["upperReg"]}`);

            let doa = digitsOfAgreement(testCase["upperReg"], testValue);

            if (testCase["upperReg"] < 1/Number.MAX_VALUE && testCase["upperReg"] !== 0) {
              doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_UPPER + 300 + Math.log10(testCase["upperReg"]));
            } else {
              doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_UPPER);
            }
          });

          it("should match high accuracy estimates of function values - inverse lowerReg", function () {
            let testValue = beta.incompleteInverse(
              testCase["a"],
              testCase["b"],
              testCase["lowerReg"],
              true
            );

            // console.log(`a: ${testCase["a"]}, b: ${testCase["b"]}, p: ${testCase["lowerReg"]}, got: ${testValue}, expected: ${testCase["x"]}`);

            let doa = digitsOfAgreement(testCase["x"], testValue);

            if (testCase["lowerReg"] === 0) {
              testValue.should.equal(0);
            } else if (testCase["lowerReg"] === 1) {
              testValue.should.equal(1);
            } else if (testCase["lowerReg"] > 0.9) {
              doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV + Math.log(1 - testCase["lowerReg"]));
            } else if (testCase["lowerReg"] < 1 / Number.MAX_VALUE) {
              doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV + 307 + Math.log(testCase["lowerReg"]))
            } else {
              doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV);
            }
          });

          it("should match high accuracy estimates of function values - inverse upperReg", function () {
            let testValue = beta.incompleteInverse(
              testCase["a"],
              testCase["b"],
              testCase["upperReg"],
              false
            );

            // console.log(`a: ${testCase["a"]}, b: ${testCase["b"]}, q: ${testCase["upperReg"]}, got: ${testValue}, expected: ${testCase["x"]}`);

            let doa = digitsOfAgreement(testCase["x"], testValue);

            if (testCase["upperReg"] === 0) {
              testValue.should.equal(1);
            } else if (testCase["upperReg"] === 1) {
              testValue.should.equal(0);
            } else if (testCase["upperReg"] > 0.9) {
              doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV + Math.log(1 - testCase["upperReg"]));
            } else if (testCase["upperReg"] < 1 / Number.MAX_VALUE) {
              doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV + 307 + Math.log(testCase["upperReg"]))
            } else {
              doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV);
            }
          });


          if (testCase["lowerReg"] !== 0 && testCase["lowerReg"] !== 1) {
            it("should match high accuracy estimates of function values - inverse paramA lowerReg", function () {
              let testValue = beta.incompleteInverseParameter(
                testCase["b"],
                testCase["x"],
                testCase["lowerReg"],
                "A",
                true
              );

              //console.log(`a: ${testCase["a"]}, b: ${testCase["b"]}, x: ${testCase["x"]} p: ${testCase["lowerReg"]}, got: ${testValue} expected: ${testCase["a"]}`);

              let doa = digitsOfAgreement(testCase["a"], testValue);

              if (testCase["lowerReg"] > 0.9) {
                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV_PARAM + Math.log(1 - testCase["lowerReg"]));
              } else if (testCase["lowerReg"] < 1 / Number.MAX_VALUE) {
                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV_PARAM + 307 + Math.log(testCase["lowerReg"]))
              } else {
                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV_PARAM);
              }
            });
          }

          if (testCase["upperReg"] !== 0 && testCase["upperReg"] !== 1) {
            it("should match high accuracy estimates of function values - inverse paramA upperReg", function () {
              let testValue = beta.incompleteInverseParameter(
                testCase["b"],
                testCase["x"],
                testCase["upperReg"],
                "A",
                false
              );

              //console.log(`a: ${testCase["a"]}, b: ${testCase["b"]}, x: ${testCase["x"]} q: ${testCase["upperReg"]}, got: ${testValue} expected: ${testCase["a"]}`);

              let doa = digitsOfAgreement(testCase["a"], testValue);

              if (testCase["upperReg"] > 0.9) {
                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV_PARAM + Math.log(1 - testCase["upperReg"]));
              } else if (testCase["upperReg"] < 1 / Number.MAX_VALUE) {
                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV_PARAM + 307 + Math.log(testCase["upperReg"]))
              } else {
                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV_PARAM);
              }
            });
          }

          if (testCase["lowerReg"] !== 0 && testCase["lowerReg"] !== 1) {
            it("should match high accuracy estimates of function values - inverse paramB lowerReg", function () {
              let testValue = beta.incompleteInverseParameter(
                testCase["a"],
                testCase["x"],
                testCase["lowerReg"],
                "B",
                true
              );

              //console.log(`a: ${testCase["a"]}, b: ${testCase["b"]}, x: ${testCase["x"]} p: ${testCase["lowerReg"]}, got: ${testValue} expected: ${testCase["b"]}`);

              let doa = digitsOfAgreement(testCase["b"], testValue);

              if (testCase["lowerReg"] > 0.9) {
                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV_PARAM + Math.log(1 - testCase["lowerReg"]));
              } else if (testCase["lowerReg"] < 1 / Number.MAX_VALUE) {
                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV_PARAM + 307 + Math.log(testCase["lowerReg"]))
              } else {
                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV_PARAM);
              }
            });
          }

          if (testCase["upperReg"] !== 0 && testCase["upperReg"] !== 1) {
            it("should match high accuracy estimates of function values - inverse paramB upperReg", function () {
              let testValue = beta.incompleteInverseParameter(
                testCase["a"],
                testCase["x"],
                testCase["upperReg"],
                "B",
                false
              );

              //console.log(`a: ${testCase["a"]}, b: ${testCase["b"]}, x: ${testCase["x"]} q: ${testCase["upperReg"]}, got: ${testValue} expected: ${testCase["b"]}`);

              let doa = digitsOfAgreement(testCase["b"], testValue);

              if (testCase["upperReg"] > 0.9) {
                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV_PARAM + Math.log(1 - testCase["upperReg"]));
              } else if (testCase["upperReg"] < 1 / Number.MAX_VALUE) {
                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV_PARAM + 307 + Math.log(testCase["upperReg"]))
              } else {
                doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_INV_PARAM);
              }
            });
          }
        }
      });
    });
  });

  describe("derivative", function() {
    describe("accuracy tests", function() {
      describe("boost data set", function() {
        for (let testCase of testCasesDerivative) {
          it("should match high accuracy estimates of function values", function () {
            let testValue = beta.incompleteDerivative(
              testCase["a"],
              testCase["b"],
              testCase["x"]
            );

            console.log(`a: ${testCase["a"]}, b: ${testCase["b"]}, x: ${testCase["x"]}, got: ${testValue}, expected: ${testCase["result"]}`);

            let doa = digitsOfAgreement(testCase["result"], testValue);

            if (testCase["result"] > 1e-300) {
              doa.should.be.greaterThan(DIGIT_AGREE_TOLERANCE_INC_DERIV);
            }
          });
        }
      });
    });
  });
});